// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: liqi.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LobbyClient is the client API for Lobby service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LobbyClient interface {
	FetchConnectionInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResConnectionInfo, error)
	Signup(ctx context.Context, in *ReqSignupAccount, opts ...grpc.CallOption) (*ResSignupAccount, error)
	Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error)
	LoginSuccess(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	EmailLogin(ctx context.Context, in *ReqEmailLogin, opts ...grpc.CallOption) (*ResLogin, error)
	Oauth2Auth(ctx context.Context, in *ReqOauth2Auth, opts ...grpc.CallOption) (*ResOauth2Auth, error)
	Oauth2Check(ctx context.Context, in *ReqOauth2Check, opts ...grpc.CallOption) (*ResOauth2Check, error)
	Oauth2Signup(ctx context.Context, in *ReqOauth2Signup, opts ...grpc.CallOption) (*ResOauth2Signup, error)
	Oauth2Login(ctx context.Context, in *ReqOauth2Login, opts ...grpc.CallOption) (*ResLogin, error)
	DmmPreLogin(ctx context.Context, in *ReqDMMPreLogin, opts ...grpc.CallOption) (*ResDMMPreLogin, error)
	CreatePhoneVerifyCode(ctx context.Context, in *ReqCreatePhoneVerifyCode, opts ...grpc.CallOption) (*ResCommon, error)
	CreateEmailVerifyCode(ctx context.Context, in *ReqCreateEmailVerifyCode, opts ...grpc.CallOption) (*ResCommon, error)
	VerfifyCodeForSecure(ctx context.Context, in *ReqVerifyCodeForSecure, opts ...grpc.CallOption) (*ResVerfiyCodeForSecure, error)
	BindPhoneNumber(ctx context.Context, in *ReqBindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error)
	UnbindPhoneNumber(ctx context.Context, in *ReqUnbindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error)
	FetchPhoneLoginBind(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchPhoneLoginBind, error)
	CreatePhoneLoginBind(ctx context.Context, in *ReqCreatePhoneLoginBind, opts ...grpc.CallOption) (*ResCommon, error)
	BindEmail(ctx context.Context, in *ReqBindEmail, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyPassword(ctx context.Context, in *ReqModifyPassword, opts ...grpc.CallOption) (*ResCommon, error)
	BindAccount(ctx context.Context, in *ReqBindAccount, opts ...grpc.CallOption) (*ResCommon, error)
	Logout(ctx context.Context, in *ReqLogout, opts ...grpc.CallOption) (*ResLogout, error)
	Heatbeat(ctx context.Context, in *ReqHeatBeat, opts ...grpc.CallOption) (*ResCommon, error)
	LoginBeat(ctx context.Context, in *ReqLoginBeat, opts ...grpc.CallOption) (*ResCommon, error)
	CreateNickname(ctx context.Context, in *ReqCreateNickname, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyNickname(ctx context.Context, in *ReqModifyNickname, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyBirthday(ctx context.Context, in *ReqModifyBirthday, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResSelfRoom, error)
	CreateRoom(ctx context.Context, in *ReqCreateRoom, opts ...grpc.CallOption) (*ResCreateRoom, error)
	JoinRoom(ctx context.Context, in *ReqJoinRoom, opts ...grpc.CallOption) (*ResJoinRoom, error)
	LeaveRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	ReadyPlay(ctx context.Context, in *ReqRoomReady, opts ...grpc.CallOption) (*ResCommon, error)
	DressingStatus(ctx context.Context, in *ReqRoomDressing, opts ...grpc.CallOption) (*ResCommon, error)
	StartRoom(ctx context.Context, in *ReqRoomStart, opts ...grpc.CallOption) (*ResCommon, error)
	KickPlayer(ctx context.Context, in *ReqRoomKick, opts ...grpc.CallOption) (*ResCommon, error)
	ModifyRoom(ctx context.Context, in *ReqModifyRoom, opts ...grpc.CallOption) (*ResCommon, error)
	MatchGame(ctx context.Context, in *ReqJoinMatchQueue, opts ...grpc.CallOption) (*ResCommon, error)
	CancelMatch(ctx context.Context, in *ReqCancelMatchQueue, opts ...grpc.CallOption) (*ResCommon, error)
	FetchAccountInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountInfo, error)
	ChangeAvatar(ctx context.Context, in *ReqChangeAvatar, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveVersionReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	FetchAccountStatisticInfo(ctx context.Context, in *ReqAccountStatisticInfo, opts ...grpc.CallOption) (*ResAccountStatisticInfo, error)
	FetchAccountChallengeRankInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountChallengeRankInfo, error)
	FetchAccountCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountCharacterInfo, error)
	ShopPurchase(ctx context.Context, in *ReqShopPurchase, opts ...grpc.CallOption) (*ResShopPurchase, error)
	FetchGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResGameRecord, error)
	ReadGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGameRecordList(ctx context.Context, in *ReqGameRecordList, opts ...grpc.CallOption) (*ResGameRecordList, error)
	FetchCollectedGameRecordList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCollectedGameRecordList, error)
	FetchGameRecordsDetail(ctx context.Context, in *ReqGameRecordsDetail, opts ...grpc.CallOption) (*ResGameRecordsDetail, error)
	AddCollectedGameRecord(ctx context.Context, in *ReqAddCollectedGameRecord, opts ...grpc.CallOption) (*ResAddCollectedGameRecord, error)
	RemoveCollectedGameRecord(ctx context.Context, in *ReqRemoveCollectedGameRecord, opts ...grpc.CallOption) (*ResRemoveCollectedGameRecord, error)
	ChangeCollectedGameRecordRemarks(ctx context.Context, in *ReqChangeCollectedGameRecordRemarks, opts ...grpc.CallOption) (*ResChangeCollectedGameRecordRemarks, error)
	FetchLevelLeaderboard(ctx context.Context, in *ReqLevelLeaderboard, opts ...grpc.CallOption) (*ResLevelLeaderboard, error)
	FetchChallengeLeaderboard(ctx context.Context, in *ReqChallangeLeaderboard, opts ...grpc.CallOption) (*ResChallengeLeaderboard, error)
	FetchMutiChallengeLevel(ctx context.Context, in *ReqMutiChallengeLevel, opts ...grpc.CallOption) (*ResMutiChallengeLevel, error)
	FetchMultiAccountBrief(ctx context.Context, in *ReqMultiAccountId, opts ...grpc.CallOption) (*ResMultiAccountBrief, error)
	FetchFriendList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendList, error)
	FetchFriendApplyList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendApplyList, error)
	ApplyFriend(ctx context.Context, in *ReqApplyFriend, opts ...grpc.CallOption) (*ResCommon, error)
	HandleFriendApply(ctx context.Context, in *ReqHandleFriendApply, opts ...grpc.CallOption) (*ResCommon, error)
	RemoveFriend(ctx context.Context, in *ReqRemoveFriend, opts ...grpc.CallOption) (*ResCommon, error)
	SearchAccountById(ctx context.Context, in *ReqSearchAccountById, opts ...grpc.CallOption) (*ResSearchAccountById, error)
	SearchAccountByPattern(ctx context.Context, in *ReqSearchAccountByPattern, opts ...grpc.CallOption) (*ResSearchAccountByPattern, error)
	FetchAccountState(ctx context.Context, in *ReqAccountList, opts ...grpc.CallOption) (*ResAccountStates, error)
	FetchBagInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResBagInfo, error)
	UseBagItem(ctx context.Context, in *ReqUseBagItem, opts ...grpc.CallOption) (*ResCommon, error)
	OpenManualItem(ctx context.Context, in *ReqOpenManualItem, opts ...grpc.CallOption) (*ResCommon, error)
	OpenRandomRewardItem(ctx context.Context, in *ReqOpenRandomRewardItem, opts ...grpc.CallOption) (*ResOpenRandomRewardItem, error)
	OpenAllRewardItem(ctx context.Context, in *ReqOpenAllRewardItem, opts ...grpc.CallOption) (*ResOpenAllRewardItem, error)
	ComposeShard(ctx context.Context, in *ReqComposeShard, opts ...grpc.CallOption) (*ResCommon, error)
	FetchAnnouncement(ctx context.Context, in *ReqFetchAnnouncement, opts ...grpc.CallOption) (*ResAnnouncement, error)
	ReadAnnouncement(ctx context.Context, in *ReqReadAnnouncement, opts ...grpc.CallOption) (*ResCommon, error)
	FetchMailInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMailInfo, error)
	ReadMail(ctx context.Context, in *ReqReadMail, opts ...grpc.CallOption) (*ResCommon, error)
	DeleteMail(ctx context.Context, in *ReqDeleteMail, opts ...grpc.CallOption) (*ResCommon, error)
	TakeAttachmentFromMail(ctx context.Context, in *ReqTakeAttachment, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveAchievementReward(ctx context.Context, in *ReqReceiveAchievementReward, opts ...grpc.CallOption) (*ResReceiveAchievementReward, error)
	ReceiveAchievementGroupReward(ctx context.Context, in *ReqReceiveAchievementGroupReward, opts ...grpc.CallOption) (*ResReceiveAchievementGroupReward, error)
	FetchAchievementRate(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchAchievementRate, error)
	FetchAchievement(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAchievement, error)
	BuyShiLian(ctx context.Context, in *ReqBuyShiLian, opts ...grpc.CallOption) (*ResCommon, error)
	MatchShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	GoNextShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	UpdateClientValue(ctx context.Context, in *ReqUpdateClientValue, opts ...grpc.CallOption) (*ResCommon, error)
	FetchClientValue(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResClientValue, error)
	ClientMessage(ctx context.Context, in *ReqClientMessage, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCurrentMatchInfo(ctx context.Context, in *ReqCurrentMatchInfo, opts ...grpc.CallOption) (*ResCurrentMatchInfo, error)
	UserComplain(ctx context.Context, in *ReqUserComplain, opts ...grpc.CallOption) (*ResCommon, error)
	FetchReviveCoinInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResReviveCoinInfo, error)
	GainReviveCoin(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	FetchDailyTask(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailyTask, error)
	RefreshDailyTask(ctx context.Context, in *ReqRefreshDailyTask, opts ...grpc.CallOption) (*ResRefreshDailyTask, error)
	UseGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseGiftCode, error)
	UseSpecialGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseSpecialGiftCode, error)
	FetchTitleList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResTitleList, error)
	UseTitle(ctx context.Context, in *ReqUseTitle, opts ...grpc.CallOption) (*ResCommon, error)
	SendClientMessage(ctx context.Context, in *ReqSendClientMessage, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGameLiveInfo(ctx context.Context, in *ReqGameLiveInfo, opts ...grpc.CallOption) (*ResGameLiveInfo, error)
	FetchGameLiveLeftSegment(ctx context.Context, in *ReqGameLiveLeftSegment, opts ...grpc.CallOption) (*ResGameLiveLeftSegment, error)
	FetchGameLiveList(ctx context.Context, in *ReqGameLiveList, opts ...grpc.CallOption) (*ResGameLiveList, error)
	FetchCommentSetting(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommentSetting, error)
	UpdateCommentSetting(ctx context.Context, in *ReqUpdateCommentSetting, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCommentList(ctx context.Context, in *ReqFetchCommentList, opts ...grpc.CallOption) (*ResFetchCommentList, error)
	FetchCommentContent(ctx context.Context, in *ReqFetchCommentContent, opts ...grpc.CallOption) (*ResFetchCommentContent, error)
	LeaveComment(ctx context.Context, in *ReqLeaveComment, opts ...grpc.CallOption) (*ResCommon, error)
	DeleteComment(ctx context.Context, in *ReqDeleteComment, opts ...grpc.CallOption) (*ResCommon, error)
	UpdateReadComment(ctx context.Context, in *ReqUpdateReadComment, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRollingNotice(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ReqRollingNotice, error)
	FetchServerTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerTime, error)
	FetchPlatformProducts(ctx context.Context, in *ReqPlatformBillingProducts, opts ...grpc.CallOption) (*ResPlatformBillingProducts, error)
	CancelGooglePlayOrder(ctx context.Context, in *ReqCancelGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error)
	OpenChest(ctx context.Context, in *ReqOpenChest, opts ...grpc.CallOption) (*ResOpenChest, error)
	BuyFromChestShop(ctx context.Context, in *ReqBuyFromChestShop, opts ...grpc.CallOption) (*ResBuyFromChestShop, error)
	FetchDailySignInInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailySignInInfo, error)
	DoDailySignIn(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	DoActivitySignIn(ctx context.Context, in *ReqDoActivitySignIn, opts ...grpc.CallOption) (*ResDoActivitySignIn, error)
	FetchCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCharacterInfo, error)
	UpdateCharacterSort(ctx context.Context, in *ReqUpdateCharacterSort, opts ...grpc.CallOption) (*ResCommon, error)
	ChangeMainCharacter(ctx context.Context, in *ReqChangeMainCharacter, opts ...grpc.CallOption) (*ResCommon, error)
	ChangeCharacterSkin(ctx context.Context, in *ReqChangeCharacterSkin, opts ...grpc.CallOption) (*ResCommon, error)
	ChangeCharacterView(ctx context.Context, in *ReqChangeCharacterView, opts ...grpc.CallOption) (*ResCommon, error)
	SetHiddenCharacter(ctx context.Context, in *ReqSetHiddenCharacter, opts ...grpc.CallOption) (*ResSetHiddenCharacter, error)
	SendGiftToCharacter(ctx context.Context, in *ReqSendGiftToCharacter, opts ...grpc.CallOption) (*ResSendGiftToCharacter, error)
	SellItem(ctx context.Context, in *ReqSellItem, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCommonView(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommonView, error)
	ChangeCommonView(ctx context.Context, in *ReqChangeCommonView, opts ...grpc.CallOption) (*ResCommon, error)
	SaveCommonViews(ctx context.Context, in *ReqSaveCommonViews, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCommonViews(ctx context.Context, in *ReqCommonViews, opts ...grpc.CallOption) (*ResCommonViews, error)
	FetchAllCommonViews(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAllcommonViews, error)
	UseCommonView(ctx context.Context, in *ReqUseCommonView, opts ...grpc.CallOption) (*ResCommon, error)
	UpgradeCharacter(ctx context.Context, in *ReqUpgradeCharacter, opts ...grpc.CallOption) (*ResUpgradeCharacter, error)
	AddFinishedEnding(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveEndingReward(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error)
	GameMasterCommand(ctx context.Context, in *ReqGMCommand, opts ...grpc.CallOption) (*ResCommon, error)
	FetchShopInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResShopInfo, error)
	BuyFromShop(ctx context.Context, in *ReqBuyFromShop, opts ...grpc.CallOption) (*ResBuyFromShop, error)
	BuyFromZHP(ctx context.Context, in *ReqBuyFromZHP, opts ...grpc.CallOption) (*ResCommon, error)
	RefreshZHPShop(ctx context.Context, in *ReqReshZHPShop, opts ...grpc.CallOption) (*ResRefreshZHPShop, error)
	FetchMonthTicketInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMonthTicketInfo, error)
	PayMonthTicket(ctx context.Context, in *ReqPayMonthTicket, opts ...grpc.CallOption) (*ResPayMonthTicket, error)
	ExchangeCurrency(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error)
	ExchangeChestStone(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error)
	ExchangeDiamond(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error)
	FetchServerSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerSettings, error)
	FetchAccountSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountSettings, error)
	UpdateAccountSettings(ctx context.Context, in *ReqUpdateAccountSettings, opts ...grpc.CallOption) (*ResCommon, error)
	FetchModNicknameTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResModNicknameTime, error)
	CreateWechatNativeOrder(ctx context.Context, in *ReqCreateWechatNativeOrder, opts ...grpc.CallOption) (*ResCreateWechatNativeOrder, error)
	CreateWechatAppOrder(ctx context.Context, in *ReqCreateWechatAppOrder, opts ...grpc.CallOption) (*ResCreateWechatAppOrder, error)
	CreateAlipayOrder(ctx context.Context, in *ReqCreateAlipayOrder, opts ...grpc.CallOption) (*ResCreateAlipayOrder, error)
	CreateAlipayScanOrder(ctx context.Context, in *ReqCreateAlipayScanOrder, opts ...grpc.CallOption) (*ResCreateAlipayScanOrder, error)
	CreateAlipayAppOrder(ctx context.Context, in *ReqCreateAlipayAppOrder, opts ...grpc.CallOption) (*ResCreateAlipayAppOrder, error)
	CreateJPCreditCardOrder(ctx context.Context, in *ReqCreateJPCreditCardOrder, opts ...grpc.CallOption) (*ResCreateJPCreditCardOrder, error)
	CreateJPPaypalOrder(ctx context.Context, in *ReqCreateJPPaypalOrder, opts ...grpc.CallOption) (*ResCreateJPPaypalOrder, error)
	CreateJPAuOrder(ctx context.Context, in *ReqCreateJPAuOrder, opts ...grpc.CallOption) (*ResCreateJPAuOrder, error)
	CreateJPDocomoOrder(ctx context.Context, in *ReqCreateJPDocomoOrder, opts ...grpc.CallOption) (*ResCreateJPDocomoOrder, error)
	CreateJPWebMoneyOrder(ctx context.Context, in *ReqCreateJPWebMoneyOrder, opts ...grpc.CallOption) (*ResCreateJPWebMoneyOrder, error)
	CreateJPSoftbankOrder(ctx context.Context, in *ReqCreateJPSoftbankOrder, opts ...grpc.CallOption) (*ResCreateJPSoftbankOrder, error)
	CreateENPaypalOrder(ctx context.Context, in *ReqCreateENPaypalOrder, opts ...grpc.CallOption) (*ResCreateENPaypalOrder, error)
	CreateENMasterCardOrder(ctx context.Context, in *ReqCreateENMasterCardOrder, opts ...grpc.CallOption) (*ResCreateENMasterCardOrder, error)
	CreateENVisaOrder(ctx context.Context, in *ReqCreateENVisaOrder, opts ...grpc.CallOption) (*ResCreateENVisaOrder, error)
	CreateENJCBOrder(ctx context.Context, in *ReqCreateENJCBOrder, opts ...grpc.CallOption) (*ResCreateENJCBOrder, error)
	CreateENAlipayOrder(ctx context.Context, in *ReqCreateENAlipayOrder, opts ...grpc.CallOption) (*ResCreateENAlipayOrder, error)
	CreateDMMOrder(ctx context.Context, in *ReqCreateDMMOrder, opts ...grpc.CallOption) (*ResCreateDmmOrder, error)
	CreateIAPOrder(ctx context.Context, in *ReqCreateIAPOrder, opts ...grpc.CallOption) (*ResCreateIAPOrder, error)
	CreateSteamOrder(ctx context.Context, in *ReqCreateSteamOrder, opts ...grpc.CallOption) (*ResCreateSteamOrder, error)
	VerifySteamOrder(ctx context.Context, in *ReqVerifySteamOrder, opts ...grpc.CallOption) (*ResCommon, error)
	CreateMyCardAndroidOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error)
	CreateMyCardWebOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error)
	CreatePaypalOrder(ctx context.Context, in *ReqCreatePaypalOrder, opts ...grpc.CallOption) (*ResCreatePaypalOrder, error)
	CreateXsollaOrder(ctx context.Context, in *ReqCreateXsollaOrder, opts ...grpc.CallOption) (*ResCreateXsollaOrder, error)
	VerifyMyCardOrder(ctx context.Context, in *ReqVerifyMyCardOrder, opts ...grpc.CallOption) (*ResCommon, error)
	VerificationIAPOrder(ctx context.Context, in *ReqVerificationIAPOrder, opts ...grpc.CallOption) (*ResVerificationIAPOrder, error)
	CreateYostarSDKOrder(ctx context.Context, in *ReqCreateYostarOrder, opts ...grpc.CallOption) (*ResCreateYostarOrder, error)
	CreateBillingOrder(ctx context.Context, in *ReqCreateBillingOrder, opts ...grpc.CallOption) (*ResCreateBillingOrder, error)
	SolveGooglePlayOrder(ctx context.Context, in *ReqSolveGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error)
	SolveGooglePayOrderV3(ctx context.Context, in *ReqSolveGooglePlayOrderV3, opts ...grpc.CallOption) (*ResCommon, error)
	FetchMisc(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMisc, error)
	ModifySignature(ctx context.Context, in *ReqModifySignature, opts ...grpc.CallOption) (*ResCommon, error)
	FetchIDCardInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResIDCardInfo, error)
	UpdateIDCardInfo(ctx context.Context, in *ReqUpdateIDCardInfo, opts ...grpc.CallOption) (*ResCommon, error)
	FetchVipReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResVipReward, error)
	GainVipReward(ctx context.Context, in *ReqGainVipReward, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRefundOrder(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchRefundOrder, error)
	FetchCustomizedContestList(ctx context.Context, in *ReqFetchCustomizedContestList, opts ...grpc.CallOption) (*ResFetchCustomizedContestList, error)
	FetchCustomizedContestExtendInfo(ctx context.Context, in *ReqFetchCustomizedContestExtendInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestExtendInfo, error)
	FetchCustomizedContestAuthInfo(ctx context.Context, in *ReqFetchCustomizedContestAuthInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestAuthInfo, error)
	EnterCustomizedContest(ctx context.Context, in *ReqEnterCustomizedContest, opts ...grpc.CallOption) (*ResEnterCustomizedContest, error)
	LeaveCustomizedContest(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCustomizedContestOnlineInfo(ctx context.Context, in *ReqFetchCustomizedContestOnlineInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestOnlineInfo, error)
	FetchCustomizedContestByContestId(ctx context.Context, in *ReqFetchCustomizedContestByContestId, opts ...grpc.CallOption) (*ResFetchCustomizedContestByContestId, error)
	StartCustomizedContest(ctx context.Context, in *ReqStartCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	StopCustomizedContest(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	JoinCustomizedContestChatRoom(ctx context.Context, in *ReqJoinCustomizedContestChatRoom, opts ...grpc.CallOption) (*ResJoinCustomizedContestChatRoom, error)
	LeaveCustomizedContestChatRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	SayChatMessage(ctx context.Context, in *ReqSayChatMessage, opts ...grpc.CallOption) (*ResCommon, error)
	FetchCustomizedContestGameRecords(ctx context.Context, in *ReqFetchCustomizedContestGameRecords, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameRecords, error)
	FetchCustomizedContestGameLiveList(ctx context.Context, in *ReqFetchCustomizedContestGameLiveList, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameLiveList, error)
	FollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	UnfollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error)
	FetchActivityList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityList, error)
	FetchAccountActivityData(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountActivityData, error)
	ExchangeActivityItem(ctx context.Context, in *ReqExchangeActivityItem, opts ...grpc.CallOption) (*ResExchangeActivityItem, error)
	CompleteActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	CompleteActivityFlipTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	CompletePeriodActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	CompleteRandomActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveActivityFlipTask(ctx context.Context, in *ReqReceiveActivityFlipTask, opts ...grpc.CallOption) (*ResReceiveActivityFlipTask, error)
	CompleteSegmentTaskReward(ctx context.Context, in *ReqCompleteSegmentTaskReward, opts ...grpc.CallOption) (*ResCompleteSegmentTaskReward, error)
	FetchActivityFlipInfo(ctx context.Context, in *ReqFetchActivityFlipInfo, opts ...grpc.CallOption) (*ResFetchActivityFlipInfo, error)
	GainAccumulatedPointActivityReward(ctx context.Context, in *ReqGainAccumulatedPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error)
	GainMultiPointActivityReward(ctx context.Context, in *ReqGainMultiPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRankPointLeaderboard(ctx context.Context, in *ReqFetchRankPointLeaderboard, opts ...grpc.CallOption) (*ResFetchRankPointLeaderboard, error)
	GainRankPointReward(ctx context.Context, in *ReqGainRankPointReward, opts ...grpc.CallOption) (*ResCommon, error)
	RichmanActivityNextMove(ctx context.Context, in *ReqRichmanNextMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error)
	RichmanAcitivitySpecialMove(ctx context.Context, in *ReqRichmanSpecialMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error)
	RichmanActivityChestInfo(ctx context.Context, in *ReqRichmanChestInfo, opts ...grpc.CallOption) (*ResRichmanChestInfo, error)
	CreateGameObserveAuth(ctx context.Context, in *ReqCreateGameObserveAuth, opts ...grpc.CallOption) (*ResCreateGameObserveAuth, error)
	RefreshGameObserveAuth(ctx context.Context, in *ReqRefreshGameObserveAuth, opts ...grpc.CallOption) (*ResRefreshGameObserveAuth, error)
	FetchActivityBuff(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityBuff, error)
	UpgradeActivityBuff(ctx context.Context, in *ReqUpgradeActivityBuff, opts ...grpc.CallOption) (*ResActivityBuff, error)
	UpgradeChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResUpgradeChallenge, error)
	RefreshChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResRefreshChallenge, error)
	FetchChallengeInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchChallengeInfo, error)
	ForceCompleteChallengeTask(ctx context.Context, in *ReqForceCompleteChallengeTask, opts ...grpc.CallOption) (*ResCommon, error)
	FetchChallengeSeason(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResChallengeSeasonInfo, error)
	ReceiveChallengeRankReward(ctx context.Context, in *ReqReceiveChallengeRankReward, opts ...grpc.CallOption) (*ResReceiveChallengeRankReward, error)
	FetchABMatchInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchABMatch, error)
	BuyInABMatch(ctx context.Context, in *ReqBuyInABMatch, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveABMatchReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	QuitABMatch(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	StartUnifiedMatch(ctx context.Context, in *ReqStartUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error)
	CancelUnifiedMatch(ctx context.Context, in *ReqCancelUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResGamePointRank, error)
	FetchSelfGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResFetchSelfGamePointRank, error)
	ReadSNS(ctx context.Context, in *ReqReadSNS, opts ...grpc.CallOption) (*ResReadSNS, error)
	ReplySNS(ctx context.Context, in *ReqReplySNS, opts ...grpc.CallOption) (*ResReplySNS, error)
	LikeSNS(ctx context.Context, in *ReqLikeSNS, opts ...grpc.CallOption) (*ResLikeSNS, error)
	DigMine(ctx context.Context, in *ReqDigMine, opts ...grpc.CallOption) (*ResDigMine, error)
	FetchLastPrivacy(ctx context.Context, in *ReqFetchLastPrivacy, opts ...grpc.CallOption) (*ResFetchLastPrivacy, error)
	CheckPrivacy(ctx context.Context, in *ReqCheckPrivacy, opts ...grpc.CallOption) (*ResCommon, error)
	ResponseCaptcha(ctx context.Context, in *ReqResponseCaptcha, opts ...grpc.CallOption) (*ResCommon, error)
	FetchRPGBattleHistory(ctx context.Context, in *ReqFetchRPGBattleHistory, opts ...grpc.CallOption) (*ResFetchRPGBattleHistory, error)
	ReceiveRPGRewards(ctx context.Context, in *ReqReceiveRPGRewards, opts ...grpc.CallOption) (*ResReceiveRPGRewards, error)
	BuyArenaTicket(ctx context.Context, in *ReqBuyArenaTicket, opts ...grpc.CallOption) (*ResCommon, error)
	EnterArena(ctx context.Context, in *ReqEnterArena, opts ...grpc.CallOption) (*ResCommon, error)
	ReceiveArenaReward(ctx context.Context, in *ReqArenaReward, opts ...grpc.CallOption) (*ResArenaReward, error)
	FetchOBToken(ctx context.Context, in *ReqFetchOBToken, opts ...grpc.CallOption) (*ResFetchOBToken, error)
	ReceiveCharacterRewards(ctx context.Context, in *ReqReceiveCharacterRewards, opts ...grpc.CallOption) (*ResReceiveCharacterRewards, error)
	FeedActivityFeed(ctx context.Context, in *ReqFeedActivityFeed, opts ...grpc.CallOption) (*ResFeedActivityFeed, error)
	SendActivityGiftToFriend(ctx context.Context, in *ReqSendActivityGiftToFriend, opts ...grpc.CallOption) (*ResSendActivityGiftToFriend, error)
	ReceiveActivityGift(ctx context.Context, in *ReqReceiveActivityGift, opts ...grpc.CallOption) (*ResCommon, error)
	FetchFriendFeedActivityData(ctx context.Context, in *ReqFetchFriendFeedActivityData, opts ...grpc.CallOption) (*ResFetchFriendFeedActivityData, error)
	OpenPreChestItem(ctx context.Context, in *ReqOpenPreChestItem, opts ...grpc.CallOption) (*ResOpenPreChestItem, error)
}

type lobbyClient struct {
	cc grpc.ClientConnInterface
}

func NewLobbyClient(cc grpc.ClientConnInterface) LobbyClient {
	return &lobbyClient{cc}
}

func (c *lobbyClient) FetchConnectionInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResConnectionInfo, error) {
	out := new(ResConnectionInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchConnectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Signup(ctx context.Context, in *ReqSignupAccount, opts ...grpc.CallOption) (*ResSignupAccount, error) {
	out := new(ResSignupAccount)
	err := c.cc.Invoke(ctx, "/lq.Lobby/signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Login(ctx context.Context, in *ReqLogin, opts ...grpc.CallOption) (*ResLogin, error) {
	out := new(ResLogin)
	err := c.cc.Invoke(ctx, "/lq.Lobby/login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LoginSuccess(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/loginSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) EmailLogin(ctx context.Context, in *ReqEmailLogin, opts ...grpc.CallOption) (*ResLogin, error) {
	out := new(ResLogin)
	err := c.cc.Invoke(ctx, "/lq.Lobby/emailLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Auth(ctx context.Context, in *ReqOauth2Auth, opts ...grpc.CallOption) (*ResOauth2Auth, error) {
	out := new(ResOauth2Auth)
	err := c.cc.Invoke(ctx, "/lq.Lobby/oauth2Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Check(ctx context.Context, in *ReqOauth2Check, opts ...grpc.CallOption) (*ResOauth2Check, error) {
	out := new(ResOauth2Check)
	err := c.cc.Invoke(ctx, "/lq.Lobby/oauth2Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Signup(ctx context.Context, in *ReqOauth2Signup, opts ...grpc.CallOption) (*ResOauth2Signup, error) {
	out := new(ResOauth2Signup)
	err := c.cc.Invoke(ctx, "/lq.Lobby/oauth2Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Oauth2Login(ctx context.Context, in *ReqOauth2Login, opts ...grpc.CallOption) (*ResLogin, error) {
	out := new(ResLogin)
	err := c.cc.Invoke(ctx, "/lq.Lobby/oauth2Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DmmPreLogin(ctx context.Context, in *ReqDMMPreLogin, opts ...grpc.CallOption) (*ResDMMPreLogin, error) {
	out := new(ResDMMPreLogin)
	err := c.cc.Invoke(ctx, "/lq.Lobby/dmmPreLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreatePhoneVerifyCode(ctx context.Context, in *ReqCreatePhoneVerifyCode, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createPhoneVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateEmailVerifyCode(ctx context.Context, in *ReqCreateEmailVerifyCode, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createEmailVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerfifyCodeForSecure(ctx context.Context, in *ReqVerifyCodeForSecure, opts ...grpc.CallOption) (*ResVerfiyCodeForSecure, error) {
	out := new(ResVerfiyCodeForSecure)
	err := c.cc.Invoke(ctx, "/lq.Lobby/verfifyCodeForSecure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BindPhoneNumber(ctx context.Context, in *ReqBindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/bindPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UnbindPhoneNumber(ctx context.Context, in *ReqUnbindPhoneNumber, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/unbindPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchPhoneLoginBind(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchPhoneLoginBind, error) {
	out := new(ResFetchPhoneLoginBind)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchPhoneLoginBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreatePhoneLoginBind(ctx context.Context, in *ReqCreatePhoneLoginBind, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createPhoneLoginBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BindEmail(ctx context.Context, in *ReqBindEmail, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/bindEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyPassword(ctx context.Context, in *ReqModifyPassword, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/modifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BindAccount(ctx context.Context, in *ReqBindAccount, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/bindAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Logout(ctx context.Context, in *ReqLogout, opts ...grpc.CallOption) (*ResLogout, error) {
	out := new(ResLogout)
	err := c.cc.Invoke(ctx, "/lq.Lobby/logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) Heatbeat(ctx context.Context, in *ReqHeatBeat, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/heatbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LoginBeat(ctx context.Context, in *ReqLoginBeat, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/loginBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateNickname(ctx context.Context, in *ReqCreateNickname, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyNickname(ctx context.Context, in *ReqModifyNickname, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/modifyNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyBirthday(ctx context.Context, in *ReqModifyBirthday, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/modifyBirthday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResSelfRoom, error) {
	out := new(ResSelfRoom)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateRoom(ctx context.Context, in *ReqCreateRoom, opts ...grpc.CallOption) (*ResCreateRoom, error) {
	out := new(ResCreateRoom)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) JoinRoom(ctx context.Context, in *ReqJoinRoom, opts ...grpc.CallOption) (*ResJoinRoom, error) {
	out := new(ResJoinRoom)
	err := c.cc.Invoke(ctx, "/lq.Lobby/joinRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/leaveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadyPlay(ctx context.Context, in *ReqRoomReady, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/readyPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DressingStatus(ctx context.Context, in *ReqRoomDressing, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/dressingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartRoom(ctx context.Context, in *ReqRoomStart, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/startRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) KickPlayer(ctx context.Context, in *ReqRoomKick, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/kickPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifyRoom(ctx context.Context, in *ReqModifyRoom, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/modifyRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) MatchGame(ctx context.Context, in *ReqJoinMatchQueue, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/matchGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelMatch(ctx context.Context, in *ReqCancelMatchQueue, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/cancelMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountInfo, error) {
	out := new(ResAccountInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeAvatar(ctx context.Context, in *ReqChangeAvatar, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/changeAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveVersionReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveVersionReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountStatisticInfo(ctx context.Context, in *ReqAccountStatisticInfo, opts ...grpc.CallOption) (*ResAccountStatisticInfo, error) {
	out := new(ResAccountStatisticInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAccountStatisticInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountChallengeRankInfo(ctx context.Context, in *ReqAccountInfo, opts ...grpc.CallOption) (*ResAccountChallengeRankInfo, error) {
	out := new(ResAccountChallengeRankInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAccountChallengeRankInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountCharacterInfo, error) {
	out := new(ResAccountCharacterInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAccountCharacterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ShopPurchase(ctx context.Context, in *ReqShopPurchase, opts ...grpc.CallOption) (*ResShopPurchase, error) {
	out := new(ResShopPurchase)
	err := c.cc.Invoke(ctx, "/lq.Lobby/shopPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResGameRecord, error) {
	out := new(ResGameRecord)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchGameRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadGameRecord(ctx context.Context, in *ReqGameRecord, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/readGameRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecordList(ctx context.Context, in *ReqGameRecordList, opts ...grpc.CallOption) (*ResGameRecordList, error) {
	out := new(ResGameRecordList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchGameRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCollectedGameRecordList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCollectedGameRecordList, error) {
	out := new(ResCollectedGameRecordList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCollectedGameRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameRecordsDetail(ctx context.Context, in *ReqGameRecordsDetail, opts ...grpc.CallOption) (*ResGameRecordsDetail, error) {
	out := new(ResGameRecordsDetail)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchGameRecordsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AddCollectedGameRecord(ctx context.Context, in *ReqAddCollectedGameRecord, opts ...grpc.CallOption) (*ResAddCollectedGameRecord, error) {
	out := new(ResAddCollectedGameRecord)
	err := c.cc.Invoke(ctx, "/lq.Lobby/addCollectedGameRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RemoveCollectedGameRecord(ctx context.Context, in *ReqRemoveCollectedGameRecord, opts ...grpc.CallOption) (*ResRemoveCollectedGameRecord, error) {
	out := new(ResRemoveCollectedGameRecord)
	err := c.cc.Invoke(ctx, "/lq.Lobby/removeCollectedGameRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCollectedGameRecordRemarks(ctx context.Context, in *ReqChangeCollectedGameRecordRemarks, opts ...grpc.CallOption) (*ResChangeCollectedGameRecordRemarks, error) {
	out := new(ResChangeCollectedGameRecordRemarks)
	err := c.cc.Invoke(ctx, "/lq.Lobby/changeCollectedGameRecordRemarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchLevelLeaderboard(ctx context.Context, in *ReqLevelLeaderboard, opts ...grpc.CallOption) (*ResLevelLeaderboard, error) {
	out := new(ResLevelLeaderboard)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchLevelLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchChallengeLeaderboard(ctx context.Context, in *ReqChallangeLeaderboard, opts ...grpc.CallOption) (*ResChallengeLeaderboard, error) {
	out := new(ResChallengeLeaderboard)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchChallengeLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMutiChallengeLevel(ctx context.Context, in *ReqMutiChallengeLevel, opts ...grpc.CallOption) (*ResMutiChallengeLevel, error) {
	out := new(ResMutiChallengeLevel)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchMutiChallengeLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMultiAccountBrief(ctx context.Context, in *ReqMultiAccountId, opts ...grpc.CallOption) (*ResMultiAccountBrief, error) {
	out := new(ResMultiAccountBrief)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchMultiAccountBrief", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchFriendList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendList, error) {
	out := new(ResFriendList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchFriendApplyList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFriendApplyList, error) {
	out := new(ResFriendApplyList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchFriendApplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ApplyFriend(ctx context.Context, in *ReqApplyFriend, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/applyFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) HandleFriendApply(ctx context.Context, in *ReqHandleFriendApply, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/handleFriendApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RemoveFriend(ctx context.Context, in *ReqRemoveFriend, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/removeFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SearchAccountById(ctx context.Context, in *ReqSearchAccountById, opts ...grpc.CallOption) (*ResSearchAccountById, error) {
	out := new(ResSearchAccountById)
	err := c.cc.Invoke(ctx, "/lq.Lobby/searchAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SearchAccountByPattern(ctx context.Context, in *ReqSearchAccountByPattern, opts ...grpc.CallOption) (*ResSearchAccountByPattern, error) {
	out := new(ResSearchAccountByPattern)
	err := c.cc.Invoke(ctx, "/lq.Lobby/searchAccountByPattern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountState(ctx context.Context, in *ReqAccountList, opts ...grpc.CallOption) (*ResAccountStates, error) {
	out := new(ResAccountStates)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAccountState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchBagInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResBagInfo, error) {
	out := new(ResBagInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchBagInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseBagItem(ctx context.Context, in *ReqUseBagItem, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/useBagItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenManualItem(ctx context.Context, in *ReqOpenManualItem, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/openManualItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenRandomRewardItem(ctx context.Context, in *ReqOpenRandomRewardItem, opts ...grpc.CallOption) (*ResOpenRandomRewardItem, error) {
	out := new(ResOpenRandomRewardItem)
	err := c.cc.Invoke(ctx, "/lq.Lobby/openRandomRewardItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenAllRewardItem(ctx context.Context, in *ReqOpenAllRewardItem, opts ...grpc.CallOption) (*ResOpenAllRewardItem, error) {
	out := new(ResOpenAllRewardItem)
	err := c.cc.Invoke(ctx, "/lq.Lobby/openAllRewardItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ComposeShard(ctx context.Context, in *ReqComposeShard, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/composeShard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAnnouncement(ctx context.Context, in *ReqFetchAnnouncement, opts ...grpc.CallOption) (*ResAnnouncement, error) {
	out := new(ResAnnouncement)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadAnnouncement(ctx context.Context, in *ReqReadAnnouncement, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/readAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMailInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMailInfo, error) {
	out := new(ResMailInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchMailInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadMail(ctx context.Context, in *ReqReadMail, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/readMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DeleteMail(ctx context.Context, in *ReqDeleteMail, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/deleteMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) TakeAttachmentFromMail(ctx context.Context, in *ReqTakeAttachment, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/takeAttachmentFromMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveAchievementReward(ctx context.Context, in *ReqReceiveAchievementReward, opts ...grpc.CallOption) (*ResReceiveAchievementReward, error) {
	out := new(ResReceiveAchievementReward)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveAchievementReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveAchievementGroupReward(ctx context.Context, in *ReqReceiveAchievementGroupReward, opts ...grpc.CallOption) (*ResReceiveAchievementGroupReward, error) {
	out := new(ResReceiveAchievementGroupReward)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveAchievementGroupReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAchievementRate(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchAchievementRate, error) {
	out := new(ResFetchAchievementRate)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAchievementRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAchievement(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAchievement, error) {
	out := new(ResAchievement)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyShiLian(ctx context.Context, in *ReqBuyShiLian, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/buyShiLian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) MatchShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/matchShiLian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GoNextShiLian(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/goNextShiLian", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateClientValue(ctx context.Context, in *ReqUpdateClientValue, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/updateClientValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchClientValue(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResClientValue, error) {
	out := new(ResClientValue)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchClientValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ClientMessage(ctx context.Context, in *ReqClientMessage, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/clientMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCurrentMatchInfo(ctx context.Context, in *ReqCurrentMatchInfo, opts ...grpc.CallOption) (*ResCurrentMatchInfo, error) {
	out := new(ResCurrentMatchInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCurrentMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UserComplain(ctx context.Context, in *ReqUserComplain, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/userComplain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchReviveCoinInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResReviveCoinInfo, error) {
	out := new(ResReviveCoinInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchReviveCoinInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainReviveCoin(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/gainReviveCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchDailyTask(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailyTask, error) {
	out := new(ResDailyTask)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchDailyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshDailyTask(ctx context.Context, in *ReqRefreshDailyTask, opts ...grpc.CallOption) (*ResRefreshDailyTask, error) {
	out := new(ResRefreshDailyTask)
	err := c.cc.Invoke(ctx, "/lq.Lobby/refreshDailyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseGiftCode, error) {
	out := new(ResUseGiftCode)
	err := c.cc.Invoke(ctx, "/lq.Lobby/useGiftCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseSpecialGiftCode(ctx context.Context, in *ReqUseGiftCode, opts ...grpc.CallOption) (*ResUseSpecialGiftCode, error) {
	out := new(ResUseSpecialGiftCode)
	err := c.cc.Invoke(ctx, "/lq.Lobby/useSpecialGiftCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchTitleList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResTitleList, error) {
	out := new(ResTitleList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchTitleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseTitle(ctx context.Context, in *ReqUseTitle, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/useTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SendClientMessage(ctx context.Context, in *ReqSendClientMessage, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/sendClientMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameLiveInfo(ctx context.Context, in *ReqGameLiveInfo, opts ...grpc.CallOption) (*ResGameLiveInfo, error) {
	out := new(ResGameLiveInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchGameLiveInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameLiveLeftSegment(ctx context.Context, in *ReqGameLiveLeftSegment, opts ...grpc.CallOption) (*ResGameLiveLeftSegment, error) {
	out := new(ResGameLiveLeftSegment)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchGameLiveLeftSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGameLiveList(ctx context.Context, in *ReqGameLiveList, opts ...grpc.CallOption) (*ResGameLiveList, error) {
	out := new(ResGameLiveList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchGameLiveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommentSetting(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommentSetting, error) {
	out := new(ResCommentSetting)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCommentSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateCommentSetting(ctx context.Context, in *ReqUpdateCommentSetting, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/updateCommentSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommentList(ctx context.Context, in *ReqFetchCommentList, opts ...grpc.CallOption) (*ResFetchCommentList, error) {
	out := new(ResFetchCommentList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommentContent(ctx context.Context, in *ReqFetchCommentContent, opts ...grpc.CallOption) (*ResFetchCommentContent, error) {
	out := new(ResFetchCommentContent)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCommentContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveComment(ctx context.Context, in *ReqLeaveComment, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/leaveComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DeleteComment(ctx context.Context, in *ReqDeleteComment, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/deleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateReadComment(ctx context.Context, in *ReqUpdateReadComment, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/updateReadComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRollingNotice(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ReqRollingNotice, error) {
	out := new(ReqRollingNotice)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchRollingNotice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchServerTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerTime, error) {
	out := new(ResServerTime)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchServerTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchPlatformProducts(ctx context.Context, in *ReqPlatformBillingProducts, opts ...grpc.CallOption) (*ResPlatformBillingProducts, error) {
	out := new(ResPlatformBillingProducts)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchPlatformProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelGooglePlayOrder(ctx context.Context, in *ReqCancelGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/cancelGooglePlayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenChest(ctx context.Context, in *ReqOpenChest, opts ...grpc.CallOption) (*ResOpenChest, error) {
	out := new(ResOpenChest)
	err := c.cc.Invoke(ctx, "/lq.Lobby/openChest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyFromChestShop(ctx context.Context, in *ReqBuyFromChestShop, opts ...grpc.CallOption) (*ResBuyFromChestShop, error) {
	out := new(ResBuyFromChestShop)
	err := c.cc.Invoke(ctx, "/lq.Lobby/buyFromChestShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchDailySignInInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResDailySignInInfo, error) {
	out := new(ResDailySignInInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchDailySignInInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DoDailySignIn(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/doDailySignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DoActivitySignIn(ctx context.Context, in *ReqDoActivitySignIn, opts ...grpc.CallOption) (*ResDoActivitySignIn, error) {
	out := new(ResDoActivitySignIn)
	err := c.cc.Invoke(ctx, "/lq.Lobby/doActivitySignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCharacterInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCharacterInfo, error) {
	out := new(ResCharacterInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCharacterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateCharacterSort(ctx context.Context, in *ReqUpdateCharacterSort, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/updateCharacterSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeMainCharacter(ctx context.Context, in *ReqChangeMainCharacter, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/changeMainCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCharacterSkin(ctx context.Context, in *ReqChangeCharacterSkin, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/changeCharacterSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCharacterView(ctx context.Context, in *ReqChangeCharacterView, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/changeCharacterView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SetHiddenCharacter(ctx context.Context, in *ReqSetHiddenCharacter, opts ...grpc.CallOption) (*ResSetHiddenCharacter, error) {
	out := new(ResSetHiddenCharacter)
	err := c.cc.Invoke(ctx, "/lq.Lobby/setHiddenCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SendGiftToCharacter(ctx context.Context, in *ReqSendGiftToCharacter, opts ...grpc.CallOption) (*ResSendGiftToCharacter, error) {
	out := new(ResSendGiftToCharacter)
	err := c.cc.Invoke(ctx, "/lq.Lobby/sendGiftToCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SellItem(ctx context.Context, in *ReqSellItem, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/sellItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommonView(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommonView, error) {
	out := new(ResCommonView)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCommonView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ChangeCommonView(ctx context.Context, in *ReqChangeCommonView, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/changeCommonView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SaveCommonViews(ctx context.Context, in *ReqSaveCommonViews, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/saveCommonViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCommonViews(ctx context.Context, in *ReqCommonViews, opts ...grpc.CallOption) (*ResCommonViews, error) {
	out := new(ResCommonViews)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCommonViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAllCommonViews(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAllcommonViews, error) {
	out := new(ResAllcommonViews)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAllCommonViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UseCommonView(ctx context.Context, in *ReqUseCommonView, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/useCommonView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeCharacter(ctx context.Context, in *ReqUpgradeCharacter, opts ...grpc.CallOption) (*ResUpgradeCharacter, error) {
	out := new(ResUpgradeCharacter)
	err := c.cc.Invoke(ctx, "/lq.Lobby/upgradeCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) AddFinishedEnding(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/addFinishedEnding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveEndingReward(ctx context.Context, in *ReqFinishedEnding, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveEndingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GameMasterCommand(ctx context.Context, in *ReqGMCommand, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/gameMasterCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchShopInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResShopInfo, error) {
	out := new(ResShopInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchShopInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyFromShop(ctx context.Context, in *ReqBuyFromShop, opts ...grpc.CallOption) (*ResBuyFromShop, error) {
	out := new(ResBuyFromShop)
	err := c.cc.Invoke(ctx, "/lq.Lobby/buyFromShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyFromZHP(ctx context.Context, in *ReqBuyFromZHP, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/buyFromZHP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshZHPShop(ctx context.Context, in *ReqReshZHPShop, opts ...grpc.CallOption) (*ResRefreshZHPShop, error) {
	out := new(ResRefreshZHPShop)
	err := c.cc.Invoke(ctx, "/lq.Lobby/refreshZHPShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMonthTicketInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMonthTicketInfo, error) {
	out := new(ResMonthTicketInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchMonthTicketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) PayMonthTicket(ctx context.Context, in *ReqPayMonthTicket, opts ...grpc.CallOption) (*ResPayMonthTicket, error) {
	out := new(ResPayMonthTicket)
	err := c.cc.Invoke(ctx, "/lq.Lobby/payMonthTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeCurrency(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/exchangeCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeChestStone(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/exchangeChestStone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeDiamond(ctx context.Context, in *ReqExchangeCurrency, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/exchangeDiamond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchServerSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResServerSettings, error) {
	out := new(ResServerSettings)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchServerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountSettings(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountSettings, error) {
	out := new(ResAccountSettings)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAccountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateAccountSettings(ctx context.Context, in *ReqUpdateAccountSettings, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/updateAccountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchModNicknameTime(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResModNicknameTime, error) {
	out := new(ResModNicknameTime)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchModNicknameTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateWechatNativeOrder(ctx context.Context, in *ReqCreateWechatNativeOrder, opts ...grpc.CallOption) (*ResCreateWechatNativeOrder, error) {
	out := new(ResCreateWechatNativeOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createWechatNativeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateWechatAppOrder(ctx context.Context, in *ReqCreateWechatAppOrder, opts ...grpc.CallOption) (*ResCreateWechatAppOrder, error) {
	out := new(ResCreateWechatAppOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createWechatAppOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateAlipayOrder(ctx context.Context, in *ReqCreateAlipayOrder, opts ...grpc.CallOption) (*ResCreateAlipayOrder, error) {
	out := new(ResCreateAlipayOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createAlipayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateAlipayScanOrder(ctx context.Context, in *ReqCreateAlipayScanOrder, opts ...grpc.CallOption) (*ResCreateAlipayScanOrder, error) {
	out := new(ResCreateAlipayScanOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createAlipayScanOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateAlipayAppOrder(ctx context.Context, in *ReqCreateAlipayAppOrder, opts ...grpc.CallOption) (*ResCreateAlipayAppOrder, error) {
	out := new(ResCreateAlipayAppOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createAlipayAppOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPCreditCardOrder(ctx context.Context, in *ReqCreateJPCreditCardOrder, opts ...grpc.CallOption) (*ResCreateJPCreditCardOrder, error) {
	out := new(ResCreateJPCreditCardOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createJPCreditCardOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPPaypalOrder(ctx context.Context, in *ReqCreateJPPaypalOrder, opts ...grpc.CallOption) (*ResCreateJPPaypalOrder, error) {
	out := new(ResCreateJPPaypalOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createJPPaypalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPAuOrder(ctx context.Context, in *ReqCreateJPAuOrder, opts ...grpc.CallOption) (*ResCreateJPAuOrder, error) {
	out := new(ResCreateJPAuOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createJPAuOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPDocomoOrder(ctx context.Context, in *ReqCreateJPDocomoOrder, opts ...grpc.CallOption) (*ResCreateJPDocomoOrder, error) {
	out := new(ResCreateJPDocomoOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createJPDocomoOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPWebMoneyOrder(ctx context.Context, in *ReqCreateJPWebMoneyOrder, opts ...grpc.CallOption) (*ResCreateJPWebMoneyOrder, error) {
	out := new(ResCreateJPWebMoneyOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createJPWebMoneyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateJPSoftbankOrder(ctx context.Context, in *ReqCreateJPSoftbankOrder, opts ...grpc.CallOption) (*ResCreateJPSoftbankOrder, error) {
	out := new(ResCreateJPSoftbankOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createJPSoftbankOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENPaypalOrder(ctx context.Context, in *ReqCreateENPaypalOrder, opts ...grpc.CallOption) (*ResCreateENPaypalOrder, error) {
	out := new(ResCreateENPaypalOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createENPaypalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENMasterCardOrder(ctx context.Context, in *ReqCreateENMasterCardOrder, opts ...grpc.CallOption) (*ResCreateENMasterCardOrder, error) {
	out := new(ResCreateENMasterCardOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createENMasterCardOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENVisaOrder(ctx context.Context, in *ReqCreateENVisaOrder, opts ...grpc.CallOption) (*ResCreateENVisaOrder, error) {
	out := new(ResCreateENVisaOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createENVisaOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENJCBOrder(ctx context.Context, in *ReqCreateENJCBOrder, opts ...grpc.CallOption) (*ResCreateENJCBOrder, error) {
	out := new(ResCreateENJCBOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createENJCBOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateENAlipayOrder(ctx context.Context, in *ReqCreateENAlipayOrder, opts ...grpc.CallOption) (*ResCreateENAlipayOrder, error) {
	out := new(ResCreateENAlipayOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createENAlipayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateDMMOrder(ctx context.Context, in *ReqCreateDMMOrder, opts ...grpc.CallOption) (*ResCreateDmmOrder, error) {
	out := new(ResCreateDmmOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createDMMOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateIAPOrder(ctx context.Context, in *ReqCreateIAPOrder, opts ...grpc.CallOption) (*ResCreateIAPOrder, error) {
	out := new(ResCreateIAPOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createIAPOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateSteamOrder(ctx context.Context, in *ReqCreateSteamOrder, opts ...grpc.CallOption) (*ResCreateSteamOrder, error) {
	out := new(ResCreateSteamOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createSteamOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerifySteamOrder(ctx context.Context, in *ReqVerifySteamOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/verifySteamOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateMyCardAndroidOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error) {
	out := new(ResCreateMyCardOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createMyCardAndroidOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateMyCardWebOrder(ctx context.Context, in *ReqCreateMyCardOrder, opts ...grpc.CallOption) (*ResCreateMyCardOrder, error) {
	out := new(ResCreateMyCardOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createMyCardWebOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreatePaypalOrder(ctx context.Context, in *ReqCreatePaypalOrder, opts ...grpc.CallOption) (*ResCreatePaypalOrder, error) {
	out := new(ResCreatePaypalOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createPaypalOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateXsollaOrder(ctx context.Context, in *ReqCreateXsollaOrder, opts ...grpc.CallOption) (*ResCreateXsollaOrder, error) {
	out := new(ResCreateXsollaOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createXsollaOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerifyMyCardOrder(ctx context.Context, in *ReqVerifyMyCardOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/verifyMyCardOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) VerificationIAPOrder(ctx context.Context, in *ReqVerificationIAPOrder, opts ...grpc.CallOption) (*ResVerificationIAPOrder, error) {
	out := new(ResVerificationIAPOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/verificationIAPOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateYostarSDKOrder(ctx context.Context, in *ReqCreateYostarOrder, opts ...grpc.CallOption) (*ResCreateYostarOrder, error) {
	out := new(ResCreateYostarOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createYostarSDKOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateBillingOrder(ctx context.Context, in *ReqCreateBillingOrder, opts ...grpc.CallOption) (*ResCreateBillingOrder, error) {
	out := new(ResCreateBillingOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createBillingOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SolveGooglePlayOrder(ctx context.Context, in *ReqSolveGooglePlayOrder, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/solveGooglePlayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SolveGooglePayOrderV3(ctx context.Context, in *ReqSolveGooglePlayOrderV3, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/solveGooglePayOrderV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchMisc(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResMisc, error) {
	out := new(ResMisc)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchMisc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ModifySignature(ctx context.Context, in *ReqModifySignature, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/modifySignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchIDCardInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResIDCardInfo, error) {
	out := new(ResIDCardInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchIDCardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpdateIDCardInfo(ctx context.Context, in *ReqUpdateIDCardInfo, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/updateIDCardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchVipReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResVipReward, error) {
	out := new(ResVipReward)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchVipReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainVipReward(ctx context.Context, in *ReqGainVipReward, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/gainVipReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRefundOrder(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchRefundOrder, error) {
	out := new(ResFetchRefundOrder)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchRefundOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestList(ctx context.Context, in *ReqFetchCustomizedContestList, opts ...grpc.CallOption) (*ResFetchCustomizedContestList, error) {
	out := new(ResFetchCustomizedContestList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCustomizedContestList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestExtendInfo(ctx context.Context, in *ReqFetchCustomizedContestExtendInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestExtendInfo, error) {
	out := new(ResFetchCustomizedContestExtendInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCustomizedContestExtendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestAuthInfo(ctx context.Context, in *ReqFetchCustomizedContestAuthInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestAuthInfo, error) {
	out := new(ResFetchCustomizedContestAuthInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCustomizedContestAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) EnterCustomizedContest(ctx context.Context, in *ReqEnterCustomizedContest, opts ...grpc.CallOption) (*ResEnterCustomizedContest, error) {
	out := new(ResEnterCustomizedContest)
	err := c.cc.Invoke(ctx, "/lq.Lobby/enterCustomizedContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveCustomizedContest(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/leaveCustomizedContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestOnlineInfo(ctx context.Context, in *ReqFetchCustomizedContestOnlineInfo, opts ...grpc.CallOption) (*ResFetchCustomizedContestOnlineInfo, error) {
	out := new(ResFetchCustomizedContestOnlineInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCustomizedContestOnlineInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestByContestId(ctx context.Context, in *ReqFetchCustomizedContestByContestId, opts ...grpc.CallOption) (*ResFetchCustomizedContestByContestId, error) {
	out := new(ResFetchCustomizedContestByContestId)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCustomizedContestByContestId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartCustomizedContest(ctx context.Context, in *ReqStartCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/startCustomizedContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StopCustomizedContest(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/stopCustomizedContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) JoinCustomizedContestChatRoom(ctx context.Context, in *ReqJoinCustomizedContestChatRoom, opts ...grpc.CallOption) (*ResJoinCustomizedContestChatRoom, error) {
	out := new(ResJoinCustomizedContestChatRoom)
	err := c.cc.Invoke(ctx, "/lq.Lobby/joinCustomizedContestChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LeaveCustomizedContestChatRoom(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/leaveCustomizedContestChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SayChatMessage(ctx context.Context, in *ReqSayChatMessage, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/sayChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestGameRecords(ctx context.Context, in *ReqFetchCustomizedContestGameRecords, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameRecords, error) {
	out := new(ResFetchCustomizedContestGameRecords)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCustomizedContestGameRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchCustomizedContestGameLiveList(ctx context.Context, in *ReqFetchCustomizedContestGameLiveList, opts ...grpc.CallOption) (*ResFetchCustomizedContestGameLiveList, error) {
	out := new(ResFetchCustomizedContestGameLiveList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchCustomizedContestGameLiveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/followCustomizedContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UnfollowCustomizedContest(ctx context.Context, in *ReqTargetCustomizedContest, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/unfollowCustomizedContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityList(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityList, error) {
	out := new(ResActivityList)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchActivityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchAccountActivityData(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResAccountActivityData, error) {
	out := new(ResAccountActivityData)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchAccountActivityData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ExchangeActivityItem(ctx context.Context, in *ReqExchangeActivityItem, opts ...grpc.CallOption) (*ResExchangeActivityItem, error) {
	out := new(ResExchangeActivityItem)
	err := c.cc.Invoke(ctx, "/lq.Lobby/exchangeActivityItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/completeActivityTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteActivityFlipTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/completeActivityFlipTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompletePeriodActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/completePeriodActivityTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteRandomActivityTask(ctx context.Context, in *ReqCompleteActivityTask, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/completeRandomActivityTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveActivityFlipTask(ctx context.Context, in *ReqReceiveActivityFlipTask, opts ...grpc.CallOption) (*ResReceiveActivityFlipTask, error) {
	out := new(ResReceiveActivityFlipTask)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveActivityFlipTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CompleteSegmentTaskReward(ctx context.Context, in *ReqCompleteSegmentTaskReward, opts ...grpc.CallOption) (*ResCompleteSegmentTaskReward, error) {
	out := new(ResCompleteSegmentTaskReward)
	err := c.cc.Invoke(ctx, "/lq.Lobby/completeSegmentTaskReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityFlipInfo(ctx context.Context, in *ReqFetchActivityFlipInfo, opts ...grpc.CallOption) (*ResFetchActivityFlipInfo, error) {
	out := new(ResFetchActivityFlipInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchActivityFlipInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainAccumulatedPointActivityReward(ctx context.Context, in *ReqGainAccumulatedPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/gainAccumulatedPointActivityReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainMultiPointActivityReward(ctx context.Context, in *ReqGainMultiPointActivityReward, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/gainMultiPointActivityReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRankPointLeaderboard(ctx context.Context, in *ReqFetchRankPointLeaderboard, opts ...grpc.CallOption) (*ResFetchRankPointLeaderboard, error) {
	out := new(ResFetchRankPointLeaderboard)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchRankPointLeaderboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) GainRankPointReward(ctx context.Context, in *ReqGainRankPointReward, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/gainRankPointReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RichmanActivityNextMove(ctx context.Context, in *ReqRichmanNextMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error) {
	out := new(ResRichmanNextMove)
	err := c.cc.Invoke(ctx, "/lq.Lobby/richmanActivityNextMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RichmanAcitivitySpecialMove(ctx context.Context, in *ReqRichmanSpecialMove, opts ...grpc.CallOption) (*ResRichmanNextMove, error) {
	out := new(ResRichmanNextMove)
	err := c.cc.Invoke(ctx, "/lq.Lobby/richmanAcitivitySpecialMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RichmanActivityChestInfo(ctx context.Context, in *ReqRichmanChestInfo, opts ...grpc.CallOption) (*ResRichmanChestInfo, error) {
	out := new(ResRichmanChestInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/richmanActivityChestInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CreateGameObserveAuth(ctx context.Context, in *ReqCreateGameObserveAuth, opts ...grpc.CallOption) (*ResCreateGameObserveAuth, error) {
	out := new(ResCreateGameObserveAuth)
	err := c.cc.Invoke(ctx, "/lq.Lobby/createGameObserveAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshGameObserveAuth(ctx context.Context, in *ReqRefreshGameObserveAuth, opts ...grpc.CallOption) (*ResRefreshGameObserveAuth, error) {
	out := new(ResRefreshGameObserveAuth)
	err := c.cc.Invoke(ctx, "/lq.Lobby/refreshGameObserveAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchActivityBuff(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResActivityBuff, error) {
	out := new(ResActivityBuff)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchActivityBuff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeActivityBuff(ctx context.Context, in *ReqUpgradeActivityBuff, opts ...grpc.CallOption) (*ResActivityBuff, error) {
	out := new(ResActivityBuff)
	err := c.cc.Invoke(ctx, "/lq.Lobby/upgradeActivityBuff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) UpgradeChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResUpgradeChallenge, error) {
	out := new(ResUpgradeChallenge)
	err := c.cc.Invoke(ctx, "/lq.Lobby/upgradeChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) RefreshChallenge(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResRefreshChallenge, error) {
	out := new(ResRefreshChallenge)
	err := c.cc.Invoke(ctx, "/lq.Lobby/refreshChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchChallengeInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchChallengeInfo, error) {
	out := new(ResFetchChallengeInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchChallengeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ForceCompleteChallengeTask(ctx context.Context, in *ReqForceCompleteChallengeTask, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/forceCompleteChallengeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchChallengeSeason(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResChallengeSeasonInfo, error) {
	out := new(ResChallengeSeasonInfo)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchChallengeSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveChallengeRankReward(ctx context.Context, in *ReqReceiveChallengeRankReward, opts ...grpc.CallOption) (*ResReceiveChallengeRankReward, error) {
	out := new(ResReceiveChallengeRankReward)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveChallengeRankReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchABMatchInfo(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResFetchABMatch, error) {
	out := new(ResFetchABMatch)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchABMatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyInABMatch(ctx context.Context, in *ReqBuyInABMatch, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/buyInABMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveABMatchReward(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveABMatchReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) QuitABMatch(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/quitABMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) StartUnifiedMatch(ctx context.Context, in *ReqStartUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/startUnifiedMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CancelUnifiedMatch(ctx context.Context, in *ReqCancelUnifiedMatch, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/cancelUnifiedMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResGamePointRank, error) {
	out := new(ResGamePointRank)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchGamePointRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchSelfGamePointRank(ctx context.Context, in *ReqGamePointRank, opts ...grpc.CallOption) (*ResFetchSelfGamePointRank, error) {
	out := new(ResFetchSelfGamePointRank)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchSelfGamePointRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReadSNS(ctx context.Context, in *ReqReadSNS, opts ...grpc.CallOption) (*ResReadSNS, error) {
	out := new(ResReadSNS)
	err := c.cc.Invoke(ctx, "/lq.Lobby/readSNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReplySNS(ctx context.Context, in *ReqReplySNS, opts ...grpc.CallOption) (*ResReplySNS, error) {
	out := new(ResReplySNS)
	err := c.cc.Invoke(ctx, "/lq.Lobby/replySNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) LikeSNS(ctx context.Context, in *ReqLikeSNS, opts ...grpc.CallOption) (*ResLikeSNS, error) {
	out := new(ResLikeSNS)
	err := c.cc.Invoke(ctx, "/lq.Lobby/likeSNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) DigMine(ctx context.Context, in *ReqDigMine, opts ...grpc.CallOption) (*ResDigMine, error) {
	out := new(ResDigMine)
	err := c.cc.Invoke(ctx, "/lq.Lobby/digMine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchLastPrivacy(ctx context.Context, in *ReqFetchLastPrivacy, opts ...grpc.CallOption) (*ResFetchLastPrivacy, error) {
	out := new(ResFetchLastPrivacy)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchLastPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) CheckPrivacy(ctx context.Context, in *ReqCheckPrivacy, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/checkPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ResponseCaptcha(ctx context.Context, in *ReqResponseCaptcha, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/responseCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchRPGBattleHistory(ctx context.Context, in *ReqFetchRPGBattleHistory, opts ...grpc.CallOption) (*ResFetchRPGBattleHistory, error) {
	out := new(ResFetchRPGBattleHistory)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchRPGBattleHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveRPGRewards(ctx context.Context, in *ReqReceiveRPGRewards, opts ...grpc.CallOption) (*ResReceiveRPGRewards, error) {
	out := new(ResReceiveRPGRewards)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveRPGRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) BuyArenaTicket(ctx context.Context, in *ReqBuyArenaTicket, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/buyArenaTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) EnterArena(ctx context.Context, in *ReqEnterArena, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/enterArena", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveArenaReward(ctx context.Context, in *ReqArenaReward, opts ...grpc.CallOption) (*ResArenaReward, error) {
	out := new(ResArenaReward)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveArenaReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchOBToken(ctx context.Context, in *ReqFetchOBToken, opts ...grpc.CallOption) (*ResFetchOBToken, error) {
	out := new(ResFetchOBToken)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchOBToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveCharacterRewards(ctx context.Context, in *ReqReceiveCharacterRewards, opts ...grpc.CallOption) (*ResReceiveCharacterRewards, error) {
	out := new(ResReceiveCharacterRewards)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveCharacterRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FeedActivityFeed(ctx context.Context, in *ReqFeedActivityFeed, opts ...grpc.CallOption) (*ResFeedActivityFeed, error) {
	out := new(ResFeedActivityFeed)
	err := c.cc.Invoke(ctx, "/lq.Lobby/feedActivityFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) SendActivityGiftToFriend(ctx context.Context, in *ReqSendActivityGiftToFriend, opts ...grpc.CallOption) (*ResSendActivityGiftToFriend, error) {
	out := new(ResSendActivityGiftToFriend)
	err := c.cc.Invoke(ctx, "/lq.Lobby/sendActivityGiftToFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) ReceiveActivityGift(ctx context.Context, in *ReqReceiveActivityGift, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.Lobby/receiveActivityGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) FetchFriendFeedActivityData(ctx context.Context, in *ReqFetchFriendFeedActivityData, opts ...grpc.CallOption) (*ResFetchFriendFeedActivityData, error) {
	out := new(ResFetchFriendFeedActivityData)
	err := c.cc.Invoke(ctx, "/lq.Lobby/fetchFriendFeedActivityData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyClient) OpenPreChestItem(ctx context.Context, in *ReqOpenPreChestItem, opts ...grpc.CallOption) (*ResOpenPreChestItem, error) {
	out := new(ResOpenPreChestItem)
	err := c.cc.Invoke(ctx, "/lq.Lobby/openPreChestItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LobbyServer is the server API for Lobby service.
// All implementations must embed UnimplementedLobbyServer
// for forward compatibility
type LobbyServer interface {
	FetchConnectionInfo(context.Context, *ReqCommon) (*ResConnectionInfo, error)
	Signup(context.Context, *ReqSignupAccount) (*ResSignupAccount, error)
	Login(context.Context, *ReqLogin) (*ResLogin, error)
	LoginSuccess(context.Context, *ReqCommon) (*ResCommon, error)
	EmailLogin(context.Context, *ReqEmailLogin) (*ResLogin, error)
	Oauth2Auth(context.Context, *ReqOauth2Auth) (*ResOauth2Auth, error)
	Oauth2Check(context.Context, *ReqOauth2Check) (*ResOauth2Check, error)
	Oauth2Signup(context.Context, *ReqOauth2Signup) (*ResOauth2Signup, error)
	Oauth2Login(context.Context, *ReqOauth2Login) (*ResLogin, error)
	DmmPreLogin(context.Context, *ReqDMMPreLogin) (*ResDMMPreLogin, error)
	CreatePhoneVerifyCode(context.Context, *ReqCreatePhoneVerifyCode) (*ResCommon, error)
	CreateEmailVerifyCode(context.Context, *ReqCreateEmailVerifyCode) (*ResCommon, error)
	VerfifyCodeForSecure(context.Context, *ReqVerifyCodeForSecure) (*ResVerfiyCodeForSecure, error)
	BindPhoneNumber(context.Context, *ReqBindPhoneNumber) (*ResCommon, error)
	UnbindPhoneNumber(context.Context, *ReqUnbindPhoneNumber) (*ResCommon, error)
	FetchPhoneLoginBind(context.Context, *ReqCommon) (*ResFetchPhoneLoginBind, error)
	CreatePhoneLoginBind(context.Context, *ReqCreatePhoneLoginBind) (*ResCommon, error)
	BindEmail(context.Context, *ReqBindEmail) (*ResCommon, error)
	ModifyPassword(context.Context, *ReqModifyPassword) (*ResCommon, error)
	BindAccount(context.Context, *ReqBindAccount) (*ResCommon, error)
	Logout(context.Context, *ReqLogout) (*ResLogout, error)
	Heatbeat(context.Context, *ReqHeatBeat) (*ResCommon, error)
	LoginBeat(context.Context, *ReqLoginBeat) (*ResCommon, error)
	CreateNickname(context.Context, *ReqCreateNickname) (*ResCommon, error)
	ModifyNickname(context.Context, *ReqModifyNickname) (*ResCommon, error)
	ModifyBirthday(context.Context, *ReqModifyBirthday) (*ResCommon, error)
	FetchRoom(context.Context, *ReqCommon) (*ResSelfRoom, error)
	CreateRoom(context.Context, *ReqCreateRoom) (*ResCreateRoom, error)
	JoinRoom(context.Context, *ReqJoinRoom) (*ResJoinRoom, error)
	LeaveRoom(context.Context, *ReqCommon) (*ResCommon, error)
	ReadyPlay(context.Context, *ReqRoomReady) (*ResCommon, error)
	DressingStatus(context.Context, *ReqRoomDressing) (*ResCommon, error)
	StartRoom(context.Context, *ReqRoomStart) (*ResCommon, error)
	KickPlayer(context.Context, *ReqRoomKick) (*ResCommon, error)
	ModifyRoom(context.Context, *ReqModifyRoom) (*ResCommon, error)
	MatchGame(context.Context, *ReqJoinMatchQueue) (*ResCommon, error)
	CancelMatch(context.Context, *ReqCancelMatchQueue) (*ResCommon, error)
	FetchAccountInfo(context.Context, *ReqAccountInfo) (*ResAccountInfo, error)
	ChangeAvatar(context.Context, *ReqChangeAvatar) (*ResCommon, error)
	ReceiveVersionReward(context.Context, *ReqCommon) (*ResCommon, error)
	FetchAccountStatisticInfo(context.Context, *ReqAccountStatisticInfo) (*ResAccountStatisticInfo, error)
	FetchAccountChallengeRankInfo(context.Context, *ReqAccountInfo) (*ResAccountChallengeRankInfo, error)
	FetchAccountCharacterInfo(context.Context, *ReqCommon) (*ResAccountCharacterInfo, error)
	ShopPurchase(context.Context, *ReqShopPurchase) (*ResShopPurchase, error)
	FetchGameRecord(context.Context, *ReqGameRecord) (*ResGameRecord, error)
	ReadGameRecord(context.Context, *ReqGameRecord) (*ResCommon, error)
	FetchGameRecordList(context.Context, *ReqGameRecordList) (*ResGameRecordList, error)
	FetchCollectedGameRecordList(context.Context, *ReqCommon) (*ResCollectedGameRecordList, error)
	FetchGameRecordsDetail(context.Context, *ReqGameRecordsDetail) (*ResGameRecordsDetail, error)
	AddCollectedGameRecord(context.Context, *ReqAddCollectedGameRecord) (*ResAddCollectedGameRecord, error)
	RemoveCollectedGameRecord(context.Context, *ReqRemoveCollectedGameRecord) (*ResRemoveCollectedGameRecord, error)
	ChangeCollectedGameRecordRemarks(context.Context, *ReqChangeCollectedGameRecordRemarks) (*ResChangeCollectedGameRecordRemarks, error)
	FetchLevelLeaderboard(context.Context, *ReqLevelLeaderboard) (*ResLevelLeaderboard, error)
	FetchChallengeLeaderboard(context.Context, *ReqChallangeLeaderboard) (*ResChallengeLeaderboard, error)
	FetchMutiChallengeLevel(context.Context, *ReqMutiChallengeLevel) (*ResMutiChallengeLevel, error)
	FetchMultiAccountBrief(context.Context, *ReqMultiAccountId) (*ResMultiAccountBrief, error)
	FetchFriendList(context.Context, *ReqCommon) (*ResFriendList, error)
	FetchFriendApplyList(context.Context, *ReqCommon) (*ResFriendApplyList, error)
	ApplyFriend(context.Context, *ReqApplyFriend) (*ResCommon, error)
	HandleFriendApply(context.Context, *ReqHandleFriendApply) (*ResCommon, error)
	RemoveFriend(context.Context, *ReqRemoveFriend) (*ResCommon, error)
	SearchAccountById(context.Context, *ReqSearchAccountById) (*ResSearchAccountById, error)
	SearchAccountByPattern(context.Context, *ReqSearchAccountByPattern) (*ResSearchAccountByPattern, error)
	FetchAccountState(context.Context, *ReqAccountList) (*ResAccountStates, error)
	FetchBagInfo(context.Context, *ReqCommon) (*ResBagInfo, error)
	UseBagItem(context.Context, *ReqUseBagItem) (*ResCommon, error)
	OpenManualItem(context.Context, *ReqOpenManualItem) (*ResCommon, error)
	OpenRandomRewardItem(context.Context, *ReqOpenRandomRewardItem) (*ResOpenRandomRewardItem, error)
	OpenAllRewardItem(context.Context, *ReqOpenAllRewardItem) (*ResOpenAllRewardItem, error)
	ComposeShard(context.Context, *ReqComposeShard) (*ResCommon, error)
	FetchAnnouncement(context.Context, *ReqFetchAnnouncement) (*ResAnnouncement, error)
	ReadAnnouncement(context.Context, *ReqReadAnnouncement) (*ResCommon, error)
	FetchMailInfo(context.Context, *ReqCommon) (*ResMailInfo, error)
	ReadMail(context.Context, *ReqReadMail) (*ResCommon, error)
	DeleteMail(context.Context, *ReqDeleteMail) (*ResCommon, error)
	TakeAttachmentFromMail(context.Context, *ReqTakeAttachment) (*ResCommon, error)
	ReceiveAchievementReward(context.Context, *ReqReceiveAchievementReward) (*ResReceiveAchievementReward, error)
	ReceiveAchievementGroupReward(context.Context, *ReqReceiveAchievementGroupReward) (*ResReceiveAchievementGroupReward, error)
	FetchAchievementRate(context.Context, *ReqCommon) (*ResFetchAchievementRate, error)
	FetchAchievement(context.Context, *ReqCommon) (*ResAchievement, error)
	BuyShiLian(context.Context, *ReqBuyShiLian) (*ResCommon, error)
	MatchShiLian(context.Context, *ReqCommon) (*ResCommon, error)
	GoNextShiLian(context.Context, *ReqCommon) (*ResCommon, error)
	UpdateClientValue(context.Context, *ReqUpdateClientValue) (*ResCommon, error)
	FetchClientValue(context.Context, *ReqCommon) (*ResClientValue, error)
	ClientMessage(context.Context, *ReqClientMessage) (*ResCommon, error)
	FetchCurrentMatchInfo(context.Context, *ReqCurrentMatchInfo) (*ResCurrentMatchInfo, error)
	UserComplain(context.Context, *ReqUserComplain) (*ResCommon, error)
	FetchReviveCoinInfo(context.Context, *ReqCommon) (*ResReviveCoinInfo, error)
	GainReviveCoin(context.Context, *ReqCommon) (*ResCommon, error)
	FetchDailyTask(context.Context, *ReqCommon) (*ResDailyTask, error)
	RefreshDailyTask(context.Context, *ReqRefreshDailyTask) (*ResRefreshDailyTask, error)
	UseGiftCode(context.Context, *ReqUseGiftCode) (*ResUseGiftCode, error)
	UseSpecialGiftCode(context.Context, *ReqUseGiftCode) (*ResUseSpecialGiftCode, error)
	FetchTitleList(context.Context, *ReqCommon) (*ResTitleList, error)
	UseTitle(context.Context, *ReqUseTitle) (*ResCommon, error)
	SendClientMessage(context.Context, *ReqSendClientMessage) (*ResCommon, error)
	FetchGameLiveInfo(context.Context, *ReqGameLiveInfo) (*ResGameLiveInfo, error)
	FetchGameLiveLeftSegment(context.Context, *ReqGameLiveLeftSegment) (*ResGameLiveLeftSegment, error)
	FetchGameLiveList(context.Context, *ReqGameLiveList) (*ResGameLiveList, error)
	FetchCommentSetting(context.Context, *ReqCommon) (*ResCommentSetting, error)
	UpdateCommentSetting(context.Context, *ReqUpdateCommentSetting) (*ResCommon, error)
	FetchCommentList(context.Context, *ReqFetchCommentList) (*ResFetchCommentList, error)
	FetchCommentContent(context.Context, *ReqFetchCommentContent) (*ResFetchCommentContent, error)
	LeaveComment(context.Context, *ReqLeaveComment) (*ResCommon, error)
	DeleteComment(context.Context, *ReqDeleteComment) (*ResCommon, error)
	UpdateReadComment(context.Context, *ReqUpdateReadComment) (*ResCommon, error)
	FetchRollingNotice(context.Context, *ReqCommon) (*ReqRollingNotice, error)
	FetchServerTime(context.Context, *ReqCommon) (*ResServerTime, error)
	FetchPlatformProducts(context.Context, *ReqPlatformBillingProducts) (*ResPlatformBillingProducts, error)
	CancelGooglePlayOrder(context.Context, *ReqCancelGooglePlayOrder) (*ResCommon, error)
	OpenChest(context.Context, *ReqOpenChest) (*ResOpenChest, error)
	BuyFromChestShop(context.Context, *ReqBuyFromChestShop) (*ResBuyFromChestShop, error)
	FetchDailySignInInfo(context.Context, *ReqCommon) (*ResDailySignInInfo, error)
	DoDailySignIn(context.Context, *ReqCommon) (*ResCommon, error)
	DoActivitySignIn(context.Context, *ReqDoActivitySignIn) (*ResDoActivitySignIn, error)
	FetchCharacterInfo(context.Context, *ReqCommon) (*ResCharacterInfo, error)
	UpdateCharacterSort(context.Context, *ReqUpdateCharacterSort) (*ResCommon, error)
	ChangeMainCharacter(context.Context, *ReqChangeMainCharacter) (*ResCommon, error)
	ChangeCharacterSkin(context.Context, *ReqChangeCharacterSkin) (*ResCommon, error)
	ChangeCharacterView(context.Context, *ReqChangeCharacterView) (*ResCommon, error)
	SetHiddenCharacter(context.Context, *ReqSetHiddenCharacter) (*ResSetHiddenCharacter, error)
	SendGiftToCharacter(context.Context, *ReqSendGiftToCharacter) (*ResSendGiftToCharacter, error)
	SellItem(context.Context, *ReqSellItem) (*ResCommon, error)
	FetchCommonView(context.Context, *ReqCommon) (*ResCommonView, error)
	ChangeCommonView(context.Context, *ReqChangeCommonView) (*ResCommon, error)
	SaveCommonViews(context.Context, *ReqSaveCommonViews) (*ResCommon, error)
	FetchCommonViews(context.Context, *ReqCommonViews) (*ResCommonViews, error)
	FetchAllCommonViews(context.Context, *ReqCommon) (*ResAllcommonViews, error)
	UseCommonView(context.Context, *ReqUseCommonView) (*ResCommon, error)
	UpgradeCharacter(context.Context, *ReqUpgradeCharacter) (*ResUpgradeCharacter, error)
	AddFinishedEnding(context.Context, *ReqFinishedEnding) (*ResCommon, error)
	ReceiveEndingReward(context.Context, *ReqFinishedEnding) (*ResCommon, error)
	GameMasterCommand(context.Context, *ReqGMCommand) (*ResCommon, error)
	FetchShopInfo(context.Context, *ReqCommon) (*ResShopInfo, error)
	BuyFromShop(context.Context, *ReqBuyFromShop) (*ResBuyFromShop, error)
	BuyFromZHP(context.Context, *ReqBuyFromZHP) (*ResCommon, error)
	RefreshZHPShop(context.Context, *ReqReshZHPShop) (*ResRefreshZHPShop, error)
	FetchMonthTicketInfo(context.Context, *ReqCommon) (*ResMonthTicketInfo, error)
	PayMonthTicket(context.Context, *ReqPayMonthTicket) (*ResPayMonthTicket, error)
	ExchangeCurrency(context.Context, *ReqExchangeCurrency) (*ResCommon, error)
	ExchangeChestStone(context.Context, *ReqExchangeCurrency) (*ResCommon, error)
	ExchangeDiamond(context.Context, *ReqExchangeCurrency) (*ResCommon, error)
	FetchServerSettings(context.Context, *ReqCommon) (*ResServerSettings, error)
	FetchAccountSettings(context.Context, *ReqCommon) (*ResAccountSettings, error)
	UpdateAccountSettings(context.Context, *ReqUpdateAccountSettings) (*ResCommon, error)
	FetchModNicknameTime(context.Context, *ReqCommon) (*ResModNicknameTime, error)
	CreateWechatNativeOrder(context.Context, *ReqCreateWechatNativeOrder) (*ResCreateWechatNativeOrder, error)
	CreateWechatAppOrder(context.Context, *ReqCreateWechatAppOrder) (*ResCreateWechatAppOrder, error)
	CreateAlipayOrder(context.Context, *ReqCreateAlipayOrder) (*ResCreateAlipayOrder, error)
	CreateAlipayScanOrder(context.Context, *ReqCreateAlipayScanOrder) (*ResCreateAlipayScanOrder, error)
	CreateAlipayAppOrder(context.Context, *ReqCreateAlipayAppOrder) (*ResCreateAlipayAppOrder, error)
	CreateJPCreditCardOrder(context.Context, *ReqCreateJPCreditCardOrder) (*ResCreateJPCreditCardOrder, error)
	CreateJPPaypalOrder(context.Context, *ReqCreateJPPaypalOrder) (*ResCreateJPPaypalOrder, error)
	CreateJPAuOrder(context.Context, *ReqCreateJPAuOrder) (*ResCreateJPAuOrder, error)
	CreateJPDocomoOrder(context.Context, *ReqCreateJPDocomoOrder) (*ResCreateJPDocomoOrder, error)
	CreateJPWebMoneyOrder(context.Context, *ReqCreateJPWebMoneyOrder) (*ResCreateJPWebMoneyOrder, error)
	CreateJPSoftbankOrder(context.Context, *ReqCreateJPSoftbankOrder) (*ResCreateJPSoftbankOrder, error)
	CreateENPaypalOrder(context.Context, *ReqCreateENPaypalOrder) (*ResCreateENPaypalOrder, error)
	CreateENMasterCardOrder(context.Context, *ReqCreateENMasterCardOrder) (*ResCreateENMasterCardOrder, error)
	CreateENVisaOrder(context.Context, *ReqCreateENVisaOrder) (*ResCreateENVisaOrder, error)
	CreateENJCBOrder(context.Context, *ReqCreateENJCBOrder) (*ResCreateENJCBOrder, error)
	CreateENAlipayOrder(context.Context, *ReqCreateENAlipayOrder) (*ResCreateENAlipayOrder, error)
	CreateDMMOrder(context.Context, *ReqCreateDMMOrder) (*ResCreateDmmOrder, error)
	CreateIAPOrder(context.Context, *ReqCreateIAPOrder) (*ResCreateIAPOrder, error)
	CreateSteamOrder(context.Context, *ReqCreateSteamOrder) (*ResCreateSteamOrder, error)
	VerifySteamOrder(context.Context, *ReqVerifySteamOrder) (*ResCommon, error)
	CreateMyCardAndroidOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error)
	CreateMyCardWebOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error)
	CreatePaypalOrder(context.Context, *ReqCreatePaypalOrder) (*ResCreatePaypalOrder, error)
	CreateXsollaOrder(context.Context, *ReqCreateXsollaOrder) (*ResCreateXsollaOrder, error)
	VerifyMyCardOrder(context.Context, *ReqVerifyMyCardOrder) (*ResCommon, error)
	VerificationIAPOrder(context.Context, *ReqVerificationIAPOrder) (*ResVerificationIAPOrder, error)
	CreateYostarSDKOrder(context.Context, *ReqCreateYostarOrder) (*ResCreateYostarOrder, error)
	CreateBillingOrder(context.Context, *ReqCreateBillingOrder) (*ResCreateBillingOrder, error)
	SolveGooglePlayOrder(context.Context, *ReqSolveGooglePlayOrder) (*ResCommon, error)
	SolveGooglePayOrderV3(context.Context, *ReqSolveGooglePlayOrderV3) (*ResCommon, error)
	FetchMisc(context.Context, *ReqCommon) (*ResMisc, error)
	ModifySignature(context.Context, *ReqModifySignature) (*ResCommon, error)
	FetchIDCardInfo(context.Context, *ReqCommon) (*ResIDCardInfo, error)
	UpdateIDCardInfo(context.Context, *ReqUpdateIDCardInfo) (*ResCommon, error)
	FetchVipReward(context.Context, *ReqCommon) (*ResVipReward, error)
	GainVipReward(context.Context, *ReqGainVipReward) (*ResCommon, error)
	FetchRefundOrder(context.Context, *ReqCommon) (*ResFetchRefundOrder, error)
	FetchCustomizedContestList(context.Context, *ReqFetchCustomizedContestList) (*ResFetchCustomizedContestList, error)
	FetchCustomizedContestExtendInfo(context.Context, *ReqFetchCustomizedContestExtendInfo) (*ResFetchCustomizedContestExtendInfo, error)
	FetchCustomizedContestAuthInfo(context.Context, *ReqFetchCustomizedContestAuthInfo) (*ResFetchCustomizedContestAuthInfo, error)
	EnterCustomizedContest(context.Context, *ReqEnterCustomizedContest) (*ResEnterCustomizedContest, error)
	LeaveCustomizedContest(context.Context, *ReqCommon) (*ResCommon, error)
	FetchCustomizedContestOnlineInfo(context.Context, *ReqFetchCustomizedContestOnlineInfo) (*ResFetchCustomizedContestOnlineInfo, error)
	FetchCustomizedContestByContestId(context.Context, *ReqFetchCustomizedContestByContestId) (*ResFetchCustomizedContestByContestId, error)
	StartCustomizedContest(context.Context, *ReqStartCustomizedContest) (*ResCommon, error)
	StopCustomizedContest(context.Context, *ReqCommon) (*ResCommon, error)
	JoinCustomizedContestChatRoom(context.Context, *ReqJoinCustomizedContestChatRoom) (*ResJoinCustomizedContestChatRoom, error)
	LeaveCustomizedContestChatRoom(context.Context, *ReqCommon) (*ResCommon, error)
	SayChatMessage(context.Context, *ReqSayChatMessage) (*ResCommon, error)
	FetchCustomizedContestGameRecords(context.Context, *ReqFetchCustomizedContestGameRecords) (*ResFetchCustomizedContestGameRecords, error)
	FetchCustomizedContestGameLiveList(context.Context, *ReqFetchCustomizedContestGameLiveList) (*ResFetchCustomizedContestGameLiveList, error)
	FollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error)
	UnfollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error)
	FetchActivityList(context.Context, *ReqCommon) (*ResActivityList, error)
	FetchAccountActivityData(context.Context, *ReqCommon) (*ResAccountActivityData, error)
	ExchangeActivityItem(context.Context, *ReqExchangeActivityItem) (*ResExchangeActivityItem, error)
	CompleteActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	CompleteActivityFlipTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	CompletePeriodActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	CompleteRandomActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error)
	ReceiveActivityFlipTask(context.Context, *ReqReceiveActivityFlipTask) (*ResReceiveActivityFlipTask, error)
	CompleteSegmentTaskReward(context.Context, *ReqCompleteSegmentTaskReward) (*ResCompleteSegmentTaskReward, error)
	FetchActivityFlipInfo(context.Context, *ReqFetchActivityFlipInfo) (*ResFetchActivityFlipInfo, error)
	GainAccumulatedPointActivityReward(context.Context, *ReqGainAccumulatedPointActivityReward) (*ResCommon, error)
	GainMultiPointActivityReward(context.Context, *ReqGainMultiPointActivityReward) (*ResCommon, error)
	FetchRankPointLeaderboard(context.Context, *ReqFetchRankPointLeaderboard) (*ResFetchRankPointLeaderboard, error)
	GainRankPointReward(context.Context, *ReqGainRankPointReward) (*ResCommon, error)
	RichmanActivityNextMove(context.Context, *ReqRichmanNextMove) (*ResRichmanNextMove, error)
	RichmanAcitivitySpecialMove(context.Context, *ReqRichmanSpecialMove) (*ResRichmanNextMove, error)
	RichmanActivityChestInfo(context.Context, *ReqRichmanChestInfo) (*ResRichmanChestInfo, error)
	CreateGameObserveAuth(context.Context, *ReqCreateGameObserveAuth) (*ResCreateGameObserveAuth, error)
	RefreshGameObserveAuth(context.Context, *ReqRefreshGameObserveAuth) (*ResRefreshGameObserveAuth, error)
	FetchActivityBuff(context.Context, *ReqCommon) (*ResActivityBuff, error)
	UpgradeActivityBuff(context.Context, *ReqUpgradeActivityBuff) (*ResActivityBuff, error)
	UpgradeChallenge(context.Context, *ReqCommon) (*ResUpgradeChallenge, error)
	RefreshChallenge(context.Context, *ReqCommon) (*ResRefreshChallenge, error)
	FetchChallengeInfo(context.Context, *ReqCommon) (*ResFetchChallengeInfo, error)
	ForceCompleteChallengeTask(context.Context, *ReqForceCompleteChallengeTask) (*ResCommon, error)
	FetchChallengeSeason(context.Context, *ReqCommon) (*ResChallengeSeasonInfo, error)
	ReceiveChallengeRankReward(context.Context, *ReqReceiveChallengeRankReward) (*ResReceiveChallengeRankReward, error)
	FetchABMatchInfo(context.Context, *ReqCommon) (*ResFetchABMatch, error)
	BuyInABMatch(context.Context, *ReqBuyInABMatch) (*ResCommon, error)
	ReceiveABMatchReward(context.Context, *ReqCommon) (*ResCommon, error)
	QuitABMatch(context.Context, *ReqCommon) (*ResCommon, error)
	StartUnifiedMatch(context.Context, *ReqStartUnifiedMatch) (*ResCommon, error)
	CancelUnifiedMatch(context.Context, *ReqCancelUnifiedMatch) (*ResCommon, error)
	FetchGamePointRank(context.Context, *ReqGamePointRank) (*ResGamePointRank, error)
	FetchSelfGamePointRank(context.Context, *ReqGamePointRank) (*ResFetchSelfGamePointRank, error)
	ReadSNS(context.Context, *ReqReadSNS) (*ResReadSNS, error)
	ReplySNS(context.Context, *ReqReplySNS) (*ResReplySNS, error)
	LikeSNS(context.Context, *ReqLikeSNS) (*ResLikeSNS, error)
	DigMine(context.Context, *ReqDigMine) (*ResDigMine, error)
	FetchLastPrivacy(context.Context, *ReqFetchLastPrivacy) (*ResFetchLastPrivacy, error)
	CheckPrivacy(context.Context, *ReqCheckPrivacy) (*ResCommon, error)
	ResponseCaptcha(context.Context, *ReqResponseCaptcha) (*ResCommon, error)
	FetchRPGBattleHistory(context.Context, *ReqFetchRPGBattleHistory) (*ResFetchRPGBattleHistory, error)
	ReceiveRPGRewards(context.Context, *ReqReceiveRPGRewards) (*ResReceiveRPGRewards, error)
	BuyArenaTicket(context.Context, *ReqBuyArenaTicket) (*ResCommon, error)
	EnterArena(context.Context, *ReqEnterArena) (*ResCommon, error)
	ReceiveArenaReward(context.Context, *ReqArenaReward) (*ResArenaReward, error)
	FetchOBToken(context.Context, *ReqFetchOBToken) (*ResFetchOBToken, error)
	ReceiveCharacterRewards(context.Context, *ReqReceiveCharacterRewards) (*ResReceiveCharacterRewards, error)
	FeedActivityFeed(context.Context, *ReqFeedActivityFeed) (*ResFeedActivityFeed, error)
	SendActivityGiftToFriend(context.Context, *ReqSendActivityGiftToFriend) (*ResSendActivityGiftToFriend, error)
	ReceiveActivityGift(context.Context, *ReqReceiveActivityGift) (*ResCommon, error)
	FetchFriendFeedActivityData(context.Context, *ReqFetchFriendFeedActivityData) (*ResFetchFriendFeedActivityData, error)
	OpenPreChestItem(context.Context, *ReqOpenPreChestItem) (*ResOpenPreChestItem, error)
	mustEmbedUnimplementedLobbyServer()
}

// UnimplementedLobbyServer must be embedded to have forward compatible implementations.
type UnimplementedLobbyServer struct {
}

func (UnimplementedLobbyServer) FetchConnectionInfo(context.Context, *ReqCommon) (*ResConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchConnectionInfo not implemented")
}
func (UnimplementedLobbyServer) Signup(context.Context, *ReqSignupAccount) (*ResSignupAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedLobbyServer) Login(context.Context, *ReqLogin) (*ResLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLobbyServer) LoginSuccess(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginSuccess not implemented")
}
func (UnimplementedLobbyServer) EmailLogin(context.Context, *ReqEmailLogin) (*ResLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailLogin not implemented")
}
func (UnimplementedLobbyServer) Oauth2Auth(context.Context, *ReqOauth2Auth) (*ResOauth2Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Auth not implemented")
}
func (UnimplementedLobbyServer) Oauth2Check(context.Context, *ReqOauth2Check) (*ResOauth2Check, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Check not implemented")
}
func (UnimplementedLobbyServer) Oauth2Signup(context.Context, *ReqOauth2Signup) (*ResOauth2Signup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Signup not implemented")
}
func (UnimplementedLobbyServer) Oauth2Login(context.Context, *ReqOauth2Login) (*ResLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth2Login not implemented")
}
func (UnimplementedLobbyServer) DmmPreLogin(context.Context, *ReqDMMPreLogin) (*ResDMMPreLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DmmPreLogin not implemented")
}
func (UnimplementedLobbyServer) CreatePhoneVerifyCode(context.Context, *ReqCreatePhoneVerifyCode) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneVerifyCode not implemented")
}
func (UnimplementedLobbyServer) CreateEmailVerifyCode(context.Context, *ReqCreateEmailVerifyCode) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailVerifyCode not implemented")
}
func (UnimplementedLobbyServer) VerfifyCodeForSecure(context.Context, *ReqVerifyCodeForSecure) (*ResVerfiyCodeForSecure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerfifyCodeForSecure not implemented")
}
func (UnimplementedLobbyServer) BindPhoneNumber(context.Context, *ReqBindPhoneNumber) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindPhoneNumber not implemented")
}
func (UnimplementedLobbyServer) UnbindPhoneNumber(context.Context, *ReqUnbindPhoneNumber) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindPhoneNumber not implemented")
}
func (UnimplementedLobbyServer) FetchPhoneLoginBind(context.Context, *ReqCommon) (*ResFetchPhoneLoginBind, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPhoneLoginBind not implemented")
}
func (UnimplementedLobbyServer) CreatePhoneLoginBind(context.Context, *ReqCreatePhoneLoginBind) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoneLoginBind not implemented")
}
func (UnimplementedLobbyServer) BindEmail(context.Context, *ReqBindEmail) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEmail not implemented")
}
func (UnimplementedLobbyServer) ModifyPassword(context.Context, *ReqModifyPassword) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
}
func (UnimplementedLobbyServer) BindAccount(context.Context, *ReqBindAccount) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAccount not implemented")
}
func (UnimplementedLobbyServer) Logout(context.Context, *ReqLogout) (*ResLogout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedLobbyServer) Heatbeat(context.Context, *ReqHeatBeat) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heatbeat not implemented")
}
func (UnimplementedLobbyServer) LoginBeat(context.Context, *ReqLoginBeat) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginBeat not implemented")
}
func (UnimplementedLobbyServer) CreateNickname(context.Context, *ReqCreateNickname) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNickname not implemented")
}
func (UnimplementedLobbyServer) ModifyNickname(context.Context, *ReqModifyNickname) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyNickname not implemented")
}
func (UnimplementedLobbyServer) ModifyBirthday(context.Context, *ReqModifyBirthday) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyBirthday not implemented")
}
func (UnimplementedLobbyServer) FetchRoom(context.Context, *ReqCommon) (*ResSelfRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRoom not implemented")
}
func (UnimplementedLobbyServer) CreateRoom(context.Context, *ReqCreateRoom) (*ResCreateRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedLobbyServer) JoinRoom(context.Context, *ReqJoinRoom) (*ResJoinRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedLobbyServer) LeaveRoom(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveRoom not implemented")
}
func (UnimplementedLobbyServer) ReadyPlay(context.Context, *ReqRoomReady) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadyPlay not implemented")
}
func (UnimplementedLobbyServer) DressingStatus(context.Context, *ReqRoomDressing) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DressingStatus not implemented")
}
func (UnimplementedLobbyServer) StartRoom(context.Context, *ReqRoomStart) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRoom not implemented")
}
func (UnimplementedLobbyServer) KickPlayer(context.Context, *ReqRoomKick) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickPlayer not implemented")
}
func (UnimplementedLobbyServer) ModifyRoom(context.Context, *ReqModifyRoom) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyRoom not implemented")
}
func (UnimplementedLobbyServer) MatchGame(context.Context, *ReqJoinMatchQueue) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchGame not implemented")
}
func (UnimplementedLobbyServer) CancelMatch(context.Context, *ReqCancelMatchQueue) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMatch not implemented")
}
func (UnimplementedLobbyServer) FetchAccountInfo(context.Context, *ReqAccountInfo) (*ResAccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountInfo not implemented")
}
func (UnimplementedLobbyServer) ChangeAvatar(context.Context, *ReqChangeAvatar) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatar not implemented")
}
func (UnimplementedLobbyServer) ReceiveVersionReward(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveVersionReward not implemented")
}
func (UnimplementedLobbyServer) FetchAccountStatisticInfo(context.Context, *ReqAccountStatisticInfo) (*ResAccountStatisticInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountStatisticInfo not implemented")
}
func (UnimplementedLobbyServer) FetchAccountChallengeRankInfo(context.Context, *ReqAccountInfo) (*ResAccountChallengeRankInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountChallengeRankInfo not implemented")
}
func (UnimplementedLobbyServer) FetchAccountCharacterInfo(context.Context, *ReqCommon) (*ResAccountCharacterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountCharacterInfo not implemented")
}
func (UnimplementedLobbyServer) ShopPurchase(context.Context, *ReqShopPurchase) (*ResShopPurchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopPurchase not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecord(context.Context, *ReqGameRecord) (*ResGameRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecord not implemented")
}
func (UnimplementedLobbyServer) ReadGameRecord(context.Context, *ReqGameRecord) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGameRecord not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecordList(context.Context, *ReqGameRecordList) (*ResGameRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecordList not implemented")
}
func (UnimplementedLobbyServer) FetchCollectedGameRecordList(context.Context, *ReqCommon) (*ResCollectedGameRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCollectedGameRecordList not implemented")
}
func (UnimplementedLobbyServer) FetchGameRecordsDetail(context.Context, *ReqGameRecordsDetail) (*ResGameRecordsDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameRecordsDetail not implemented")
}
func (UnimplementedLobbyServer) AddCollectedGameRecord(context.Context, *ReqAddCollectedGameRecord) (*ResAddCollectedGameRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollectedGameRecord not implemented")
}
func (UnimplementedLobbyServer) RemoveCollectedGameRecord(context.Context, *ReqRemoveCollectedGameRecord) (*ResRemoveCollectedGameRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCollectedGameRecord not implemented")
}
func (UnimplementedLobbyServer) ChangeCollectedGameRecordRemarks(context.Context, *ReqChangeCollectedGameRecordRemarks) (*ResChangeCollectedGameRecordRemarks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCollectedGameRecordRemarks not implemented")
}
func (UnimplementedLobbyServer) FetchLevelLeaderboard(context.Context, *ReqLevelLeaderboard) (*ResLevelLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLevelLeaderboard not implemented")
}
func (UnimplementedLobbyServer) FetchChallengeLeaderboard(context.Context, *ReqChallangeLeaderboard) (*ResChallengeLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChallengeLeaderboard not implemented")
}
func (UnimplementedLobbyServer) FetchMutiChallengeLevel(context.Context, *ReqMutiChallengeLevel) (*ResMutiChallengeLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMutiChallengeLevel not implemented")
}
func (UnimplementedLobbyServer) FetchMultiAccountBrief(context.Context, *ReqMultiAccountId) (*ResMultiAccountBrief, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMultiAccountBrief not implemented")
}
func (UnimplementedLobbyServer) FetchFriendList(context.Context, *ReqCommon) (*ResFriendList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFriendList not implemented")
}
func (UnimplementedLobbyServer) FetchFriendApplyList(context.Context, *ReqCommon) (*ResFriendApplyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFriendApplyList not implemented")
}
func (UnimplementedLobbyServer) ApplyFriend(context.Context, *ReqApplyFriend) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFriend not implemented")
}
func (UnimplementedLobbyServer) HandleFriendApply(context.Context, *ReqHandleFriendApply) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleFriendApply not implemented")
}
func (UnimplementedLobbyServer) RemoveFriend(context.Context, *ReqRemoveFriend) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedLobbyServer) SearchAccountById(context.Context, *ReqSearchAccountById) (*ResSearchAccountById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccountById not implemented")
}
func (UnimplementedLobbyServer) SearchAccountByPattern(context.Context, *ReqSearchAccountByPattern) (*ResSearchAccountByPattern, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccountByPattern not implemented")
}
func (UnimplementedLobbyServer) FetchAccountState(context.Context, *ReqAccountList) (*ResAccountStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountState not implemented")
}
func (UnimplementedLobbyServer) FetchBagInfo(context.Context, *ReqCommon) (*ResBagInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBagInfo not implemented")
}
func (UnimplementedLobbyServer) UseBagItem(context.Context, *ReqUseBagItem) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseBagItem not implemented")
}
func (UnimplementedLobbyServer) OpenManualItem(context.Context, *ReqOpenManualItem) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenManualItem not implemented")
}
func (UnimplementedLobbyServer) OpenRandomRewardItem(context.Context, *ReqOpenRandomRewardItem) (*ResOpenRandomRewardItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenRandomRewardItem not implemented")
}
func (UnimplementedLobbyServer) OpenAllRewardItem(context.Context, *ReqOpenAllRewardItem) (*ResOpenAllRewardItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenAllRewardItem not implemented")
}
func (UnimplementedLobbyServer) ComposeShard(context.Context, *ReqComposeShard) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeShard not implemented")
}
func (UnimplementedLobbyServer) FetchAnnouncement(context.Context, *ReqFetchAnnouncement) (*ResAnnouncement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAnnouncement not implemented")
}
func (UnimplementedLobbyServer) ReadAnnouncement(context.Context, *ReqReadAnnouncement) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAnnouncement not implemented")
}
func (UnimplementedLobbyServer) FetchMailInfo(context.Context, *ReqCommon) (*ResMailInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMailInfo not implemented")
}
func (UnimplementedLobbyServer) ReadMail(context.Context, *ReqReadMail) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMail not implemented")
}
func (UnimplementedLobbyServer) DeleteMail(context.Context, *ReqDeleteMail) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMail not implemented")
}
func (UnimplementedLobbyServer) TakeAttachmentFromMail(context.Context, *ReqTakeAttachment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeAttachmentFromMail not implemented")
}
func (UnimplementedLobbyServer) ReceiveAchievementReward(context.Context, *ReqReceiveAchievementReward) (*ResReceiveAchievementReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAchievementReward not implemented")
}
func (UnimplementedLobbyServer) ReceiveAchievementGroupReward(context.Context, *ReqReceiveAchievementGroupReward) (*ResReceiveAchievementGroupReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAchievementGroupReward not implemented")
}
func (UnimplementedLobbyServer) FetchAchievementRate(context.Context, *ReqCommon) (*ResFetchAchievementRate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAchievementRate not implemented")
}
func (UnimplementedLobbyServer) FetchAchievement(context.Context, *ReqCommon) (*ResAchievement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAchievement not implemented")
}
func (UnimplementedLobbyServer) BuyShiLian(context.Context, *ReqBuyShiLian) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyShiLian not implemented")
}
func (UnimplementedLobbyServer) MatchShiLian(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchShiLian not implemented")
}
func (UnimplementedLobbyServer) GoNextShiLian(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoNextShiLian not implemented")
}
func (UnimplementedLobbyServer) UpdateClientValue(context.Context, *ReqUpdateClientValue) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientValue not implemented")
}
func (UnimplementedLobbyServer) FetchClientValue(context.Context, *ReqCommon) (*ResClientValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchClientValue not implemented")
}
func (UnimplementedLobbyServer) ClientMessage(context.Context, *ReqClientMessage) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientMessage not implemented")
}
func (UnimplementedLobbyServer) FetchCurrentMatchInfo(context.Context, *ReqCurrentMatchInfo) (*ResCurrentMatchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCurrentMatchInfo not implemented")
}
func (UnimplementedLobbyServer) UserComplain(context.Context, *ReqUserComplain) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserComplain not implemented")
}
func (UnimplementedLobbyServer) FetchReviveCoinInfo(context.Context, *ReqCommon) (*ResReviveCoinInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReviveCoinInfo not implemented")
}
func (UnimplementedLobbyServer) GainReviveCoin(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainReviveCoin not implemented")
}
func (UnimplementedLobbyServer) FetchDailyTask(context.Context, *ReqCommon) (*ResDailyTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDailyTask not implemented")
}
func (UnimplementedLobbyServer) RefreshDailyTask(context.Context, *ReqRefreshDailyTask) (*ResRefreshDailyTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshDailyTask not implemented")
}
func (UnimplementedLobbyServer) UseGiftCode(context.Context, *ReqUseGiftCode) (*ResUseGiftCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseGiftCode not implemented")
}
func (UnimplementedLobbyServer) UseSpecialGiftCode(context.Context, *ReqUseGiftCode) (*ResUseSpecialGiftCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseSpecialGiftCode not implemented")
}
func (UnimplementedLobbyServer) FetchTitleList(context.Context, *ReqCommon) (*ResTitleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTitleList not implemented")
}
func (UnimplementedLobbyServer) UseTitle(context.Context, *ReqUseTitle) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseTitle not implemented")
}
func (UnimplementedLobbyServer) SendClientMessage(context.Context, *ReqSendClientMessage) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClientMessage not implemented")
}
func (UnimplementedLobbyServer) FetchGameLiveInfo(context.Context, *ReqGameLiveInfo) (*ResGameLiveInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameLiveInfo not implemented")
}
func (UnimplementedLobbyServer) FetchGameLiveLeftSegment(context.Context, *ReqGameLiveLeftSegment) (*ResGameLiveLeftSegment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameLiveLeftSegment not implemented")
}
func (UnimplementedLobbyServer) FetchGameLiveList(context.Context, *ReqGameLiveList) (*ResGameLiveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGameLiveList not implemented")
}
func (UnimplementedLobbyServer) FetchCommentSetting(context.Context, *ReqCommon) (*ResCommentSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommentSetting not implemented")
}
func (UnimplementedLobbyServer) UpdateCommentSetting(context.Context, *ReqUpdateCommentSetting) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentSetting not implemented")
}
func (UnimplementedLobbyServer) FetchCommentList(context.Context, *ReqFetchCommentList) (*ResFetchCommentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommentList not implemented")
}
func (UnimplementedLobbyServer) FetchCommentContent(context.Context, *ReqFetchCommentContent) (*ResFetchCommentContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommentContent not implemented")
}
func (UnimplementedLobbyServer) LeaveComment(context.Context, *ReqLeaveComment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveComment not implemented")
}
func (UnimplementedLobbyServer) DeleteComment(context.Context, *ReqDeleteComment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedLobbyServer) UpdateReadComment(context.Context, *ReqUpdateReadComment) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadComment not implemented")
}
func (UnimplementedLobbyServer) FetchRollingNotice(context.Context, *ReqCommon) (*ReqRollingNotice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRollingNotice not implemented")
}
func (UnimplementedLobbyServer) FetchServerTime(context.Context, *ReqCommon) (*ResServerTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServerTime not implemented")
}
func (UnimplementedLobbyServer) FetchPlatformProducts(context.Context, *ReqPlatformBillingProducts) (*ResPlatformBillingProducts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPlatformProducts not implemented")
}
func (UnimplementedLobbyServer) CancelGooglePlayOrder(context.Context, *ReqCancelGooglePlayOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelGooglePlayOrder not implemented")
}
func (UnimplementedLobbyServer) OpenChest(context.Context, *ReqOpenChest) (*ResOpenChest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChest not implemented")
}
func (UnimplementedLobbyServer) BuyFromChestShop(context.Context, *ReqBuyFromChestShop) (*ResBuyFromChestShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFromChestShop not implemented")
}
func (UnimplementedLobbyServer) FetchDailySignInInfo(context.Context, *ReqCommon) (*ResDailySignInInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDailySignInInfo not implemented")
}
func (UnimplementedLobbyServer) DoDailySignIn(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoDailySignIn not implemented")
}
func (UnimplementedLobbyServer) DoActivitySignIn(context.Context, *ReqDoActivitySignIn) (*ResDoActivitySignIn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoActivitySignIn not implemented")
}
func (UnimplementedLobbyServer) FetchCharacterInfo(context.Context, *ReqCommon) (*ResCharacterInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCharacterInfo not implemented")
}
func (UnimplementedLobbyServer) UpdateCharacterSort(context.Context, *ReqUpdateCharacterSort) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacterSort not implemented")
}
func (UnimplementedLobbyServer) ChangeMainCharacter(context.Context, *ReqChangeMainCharacter) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMainCharacter not implemented")
}
func (UnimplementedLobbyServer) ChangeCharacterSkin(context.Context, *ReqChangeCharacterSkin) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCharacterSkin not implemented")
}
func (UnimplementedLobbyServer) ChangeCharacterView(context.Context, *ReqChangeCharacterView) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCharacterView not implemented")
}
func (UnimplementedLobbyServer) SetHiddenCharacter(context.Context, *ReqSetHiddenCharacter) (*ResSetHiddenCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHiddenCharacter not implemented")
}
func (UnimplementedLobbyServer) SendGiftToCharacter(context.Context, *ReqSendGiftToCharacter) (*ResSendGiftToCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGiftToCharacter not implemented")
}
func (UnimplementedLobbyServer) SellItem(context.Context, *ReqSellItem) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellItem not implemented")
}
func (UnimplementedLobbyServer) FetchCommonView(context.Context, *ReqCommon) (*ResCommonView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommonView not implemented")
}
func (UnimplementedLobbyServer) ChangeCommonView(context.Context, *ReqChangeCommonView) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCommonView not implemented")
}
func (UnimplementedLobbyServer) SaveCommonViews(context.Context, *ReqSaveCommonViews) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCommonViews not implemented")
}
func (UnimplementedLobbyServer) FetchCommonViews(context.Context, *ReqCommonViews) (*ResCommonViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCommonViews not implemented")
}
func (UnimplementedLobbyServer) FetchAllCommonViews(context.Context, *ReqCommon) (*ResAllcommonViews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllCommonViews not implemented")
}
func (UnimplementedLobbyServer) UseCommonView(context.Context, *ReqUseCommonView) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseCommonView not implemented")
}
func (UnimplementedLobbyServer) UpgradeCharacter(context.Context, *ReqUpgradeCharacter) (*ResUpgradeCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeCharacter not implemented")
}
func (UnimplementedLobbyServer) AddFinishedEnding(context.Context, *ReqFinishedEnding) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFinishedEnding not implemented")
}
func (UnimplementedLobbyServer) ReceiveEndingReward(context.Context, *ReqFinishedEnding) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveEndingReward not implemented")
}
func (UnimplementedLobbyServer) GameMasterCommand(context.Context, *ReqGMCommand) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameMasterCommand not implemented")
}
func (UnimplementedLobbyServer) FetchShopInfo(context.Context, *ReqCommon) (*ResShopInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchShopInfo not implemented")
}
func (UnimplementedLobbyServer) BuyFromShop(context.Context, *ReqBuyFromShop) (*ResBuyFromShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFromShop not implemented")
}
func (UnimplementedLobbyServer) BuyFromZHP(context.Context, *ReqBuyFromZHP) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyFromZHP not implemented")
}
func (UnimplementedLobbyServer) RefreshZHPShop(context.Context, *ReqReshZHPShop) (*ResRefreshZHPShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshZHPShop not implemented")
}
func (UnimplementedLobbyServer) FetchMonthTicketInfo(context.Context, *ReqCommon) (*ResMonthTicketInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMonthTicketInfo not implemented")
}
func (UnimplementedLobbyServer) PayMonthTicket(context.Context, *ReqPayMonthTicket) (*ResPayMonthTicket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayMonthTicket not implemented")
}
func (UnimplementedLobbyServer) ExchangeCurrency(context.Context, *ReqExchangeCurrency) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCurrency not implemented")
}
func (UnimplementedLobbyServer) ExchangeChestStone(context.Context, *ReqExchangeCurrency) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeChestStone not implemented")
}
func (UnimplementedLobbyServer) ExchangeDiamond(context.Context, *ReqExchangeCurrency) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeDiamond not implemented")
}
func (UnimplementedLobbyServer) FetchServerSettings(context.Context, *ReqCommon) (*ResServerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServerSettings not implemented")
}
func (UnimplementedLobbyServer) FetchAccountSettings(context.Context, *ReqCommon) (*ResAccountSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountSettings not implemented")
}
func (UnimplementedLobbyServer) UpdateAccountSettings(context.Context, *ReqUpdateAccountSettings) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountSettings not implemented")
}
func (UnimplementedLobbyServer) FetchModNicknameTime(context.Context, *ReqCommon) (*ResModNicknameTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchModNicknameTime not implemented")
}
func (UnimplementedLobbyServer) CreateWechatNativeOrder(context.Context, *ReqCreateWechatNativeOrder) (*ResCreateWechatNativeOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWechatNativeOrder not implemented")
}
func (UnimplementedLobbyServer) CreateWechatAppOrder(context.Context, *ReqCreateWechatAppOrder) (*ResCreateWechatAppOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWechatAppOrder not implemented")
}
func (UnimplementedLobbyServer) CreateAlipayOrder(context.Context, *ReqCreateAlipayOrder) (*ResCreateAlipayOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlipayOrder not implemented")
}
func (UnimplementedLobbyServer) CreateAlipayScanOrder(context.Context, *ReqCreateAlipayScanOrder) (*ResCreateAlipayScanOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlipayScanOrder not implemented")
}
func (UnimplementedLobbyServer) CreateAlipayAppOrder(context.Context, *ReqCreateAlipayAppOrder) (*ResCreateAlipayAppOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlipayAppOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPCreditCardOrder(context.Context, *ReqCreateJPCreditCardOrder) (*ResCreateJPCreditCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPCreditCardOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPPaypalOrder(context.Context, *ReqCreateJPPaypalOrder) (*ResCreateJPPaypalOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPPaypalOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPAuOrder(context.Context, *ReqCreateJPAuOrder) (*ResCreateJPAuOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPAuOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPDocomoOrder(context.Context, *ReqCreateJPDocomoOrder) (*ResCreateJPDocomoOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPDocomoOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPWebMoneyOrder(context.Context, *ReqCreateJPWebMoneyOrder) (*ResCreateJPWebMoneyOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPWebMoneyOrder not implemented")
}
func (UnimplementedLobbyServer) CreateJPSoftbankOrder(context.Context, *ReqCreateJPSoftbankOrder) (*ResCreateJPSoftbankOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJPSoftbankOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENPaypalOrder(context.Context, *ReqCreateENPaypalOrder) (*ResCreateENPaypalOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENPaypalOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENMasterCardOrder(context.Context, *ReqCreateENMasterCardOrder) (*ResCreateENMasterCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENMasterCardOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENVisaOrder(context.Context, *ReqCreateENVisaOrder) (*ResCreateENVisaOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENVisaOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENJCBOrder(context.Context, *ReqCreateENJCBOrder) (*ResCreateENJCBOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENJCBOrder not implemented")
}
func (UnimplementedLobbyServer) CreateENAlipayOrder(context.Context, *ReqCreateENAlipayOrder) (*ResCreateENAlipayOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateENAlipayOrder not implemented")
}
func (UnimplementedLobbyServer) CreateDMMOrder(context.Context, *ReqCreateDMMOrder) (*ResCreateDmmOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDMMOrder not implemented")
}
func (UnimplementedLobbyServer) CreateIAPOrder(context.Context, *ReqCreateIAPOrder) (*ResCreateIAPOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIAPOrder not implemented")
}
func (UnimplementedLobbyServer) CreateSteamOrder(context.Context, *ReqCreateSteamOrder) (*ResCreateSteamOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSteamOrder not implemented")
}
func (UnimplementedLobbyServer) VerifySteamOrder(context.Context, *ReqVerifySteamOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySteamOrder not implemented")
}
func (UnimplementedLobbyServer) CreateMyCardAndroidOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyCardAndroidOrder not implemented")
}
func (UnimplementedLobbyServer) CreateMyCardWebOrder(context.Context, *ReqCreateMyCardOrder) (*ResCreateMyCardOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyCardWebOrder not implemented")
}
func (UnimplementedLobbyServer) CreatePaypalOrder(context.Context, *ReqCreatePaypalOrder) (*ResCreatePaypalOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaypalOrder not implemented")
}
func (UnimplementedLobbyServer) CreateXsollaOrder(context.Context, *ReqCreateXsollaOrder) (*ResCreateXsollaOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateXsollaOrder not implemented")
}
func (UnimplementedLobbyServer) VerifyMyCardOrder(context.Context, *ReqVerifyMyCardOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMyCardOrder not implemented")
}
func (UnimplementedLobbyServer) VerificationIAPOrder(context.Context, *ReqVerificationIAPOrder) (*ResVerificationIAPOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationIAPOrder not implemented")
}
func (UnimplementedLobbyServer) CreateYostarSDKOrder(context.Context, *ReqCreateYostarOrder) (*ResCreateYostarOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateYostarSDKOrder not implemented")
}
func (UnimplementedLobbyServer) CreateBillingOrder(context.Context, *ReqCreateBillingOrder) (*ResCreateBillingOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBillingOrder not implemented")
}
func (UnimplementedLobbyServer) SolveGooglePlayOrder(context.Context, *ReqSolveGooglePlayOrder) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveGooglePlayOrder not implemented")
}
func (UnimplementedLobbyServer) SolveGooglePayOrderV3(context.Context, *ReqSolveGooglePlayOrderV3) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolveGooglePayOrderV3 not implemented")
}
func (UnimplementedLobbyServer) FetchMisc(context.Context, *ReqCommon) (*ResMisc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMisc not implemented")
}
func (UnimplementedLobbyServer) ModifySignature(context.Context, *ReqModifySignature) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifySignature not implemented")
}
func (UnimplementedLobbyServer) FetchIDCardInfo(context.Context, *ReqCommon) (*ResIDCardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchIDCardInfo not implemented")
}
func (UnimplementedLobbyServer) UpdateIDCardInfo(context.Context, *ReqUpdateIDCardInfo) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIDCardInfo not implemented")
}
func (UnimplementedLobbyServer) FetchVipReward(context.Context, *ReqCommon) (*ResVipReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchVipReward not implemented")
}
func (UnimplementedLobbyServer) GainVipReward(context.Context, *ReqGainVipReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainVipReward not implemented")
}
func (UnimplementedLobbyServer) FetchRefundOrder(context.Context, *ReqCommon) (*ResFetchRefundOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRefundOrder not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestList(context.Context, *ReqFetchCustomizedContestList) (*ResFetchCustomizedContestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestList not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestExtendInfo(context.Context, *ReqFetchCustomizedContestExtendInfo) (*ResFetchCustomizedContestExtendInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestExtendInfo not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestAuthInfo(context.Context, *ReqFetchCustomizedContestAuthInfo) (*ResFetchCustomizedContestAuthInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestAuthInfo not implemented")
}
func (UnimplementedLobbyServer) EnterCustomizedContest(context.Context, *ReqEnterCustomizedContest) (*ResEnterCustomizedContest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) LeaveCustomizedContest(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestOnlineInfo(context.Context, *ReqFetchCustomizedContestOnlineInfo) (*ResFetchCustomizedContestOnlineInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestOnlineInfo not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestByContestId(context.Context, *ReqFetchCustomizedContestByContestId) (*ResFetchCustomizedContestByContestId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestByContestId not implemented")
}
func (UnimplementedLobbyServer) StartCustomizedContest(context.Context, *ReqStartCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) StopCustomizedContest(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) JoinCustomizedContestChatRoom(context.Context, *ReqJoinCustomizedContestChatRoom) (*ResJoinCustomizedContestChatRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCustomizedContestChatRoom not implemented")
}
func (UnimplementedLobbyServer) LeaveCustomizedContestChatRoom(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveCustomizedContestChatRoom not implemented")
}
func (UnimplementedLobbyServer) SayChatMessage(context.Context, *ReqSayChatMessage) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayChatMessage not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestGameRecords(context.Context, *ReqFetchCustomizedContestGameRecords) (*ResFetchCustomizedContestGameRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestGameRecords not implemented")
}
func (UnimplementedLobbyServer) FetchCustomizedContestGameLiveList(context.Context, *ReqFetchCustomizedContestGameLiveList) (*ResFetchCustomizedContestGameLiveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCustomizedContestGameLiveList not implemented")
}
func (UnimplementedLobbyServer) FollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) UnfollowCustomizedContest(context.Context, *ReqTargetCustomizedContest) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowCustomizedContest not implemented")
}
func (UnimplementedLobbyServer) FetchActivityList(context.Context, *ReqCommon) (*ResActivityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityList not implemented")
}
func (UnimplementedLobbyServer) FetchAccountActivityData(context.Context, *ReqCommon) (*ResAccountActivityData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccountActivityData not implemented")
}
func (UnimplementedLobbyServer) ExchangeActivityItem(context.Context, *ReqExchangeActivityItem) (*ResExchangeActivityItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeActivityItem not implemented")
}
func (UnimplementedLobbyServer) CompleteActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteActivityTask not implemented")
}
func (UnimplementedLobbyServer) CompleteActivityFlipTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteActivityFlipTask not implemented")
}
func (UnimplementedLobbyServer) CompletePeriodActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePeriodActivityTask not implemented")
}
func (UnimplementedLobbyServer) CompleteRandomActivityTask(context.Context, *ReqCompleteActivityTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRandomActivityTask not implemented")
}
func (UnimplementedLobbyServer) ReceiveActivityFlipTask(context.Context, *ReqReceiveActivityFlipTask) (*ResReceiveActivityFlipTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActivityFlipTask not implemented")
}
func (UnimplementedLobbyServer) CompleteSegmentTaskReward(context.Context, *ReqCompleteSegmentTaskReward) (*ResCompleteSegmentTaskReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSegmentTaskReward not implemented")
}
func (UnimplementedLobbyServer) FetchActivityFlipInfo(context.Context, *ReqFetchActivityFlipInfo) (*ResFetchActivityFlipInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityFlipInfo not implemented")
}
func (UnimplementedLobbyServer) GainAccumulatedPointActivityReward(context.Context, *ReqGainAccumulatedPointActivityReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainAccumulatedPointActivityReward not implemented")
}
func (UnimplementedLobbyServer) GainMultiPointActivityReward(context.Context, *ReqGainMultiPointActivityReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainMultiPointActivityReward not implemented")
}
func (UnimplementedLobbyServer) FetchRankPointLeaderboard(context.Context, *ReqFetchRankPointLeaderboard) (*ResFetchRankPointLeaderboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRankPointLeaderboard not implemented")
}
func (UnimplementedLobbyServer) GainRankPointReward(context.Context, *ReqGainRankPointReward) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainRankPointReward not implemented")
}
func (UnimplementedLobbyServer) RichmanActivityNextMove(context.Context, *ReqRichmanNextMove) (*ResRichmanNextMove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RichmanActivityNextMove not implemented")
}
func (UnimplementedLobbyServer) RichmanAcitivitySpecialMove(context.Context, *ReqRichmanSpecialMove) (*ResRichmanNextMove, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RichmanAcitivitySpecialMove not implemented")
}
func (UnimplementedLobbyServer) RichmanActivityChestInfo(context.Context, *ReqRichmanChestInfo) (*ResRichmanChestInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RichmanActivityChestInfo not implemented")
}
func (UnimplementedLobbyServer) CreateGameObserveAuth(context.Context, *ReqCreateGameObserveAuth) (*ResCreateGameObserveAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameObserveAuth not implemented")
}
func (UnimplementedLobbyServer) RefreshGameObserveAuth(context.Context, *ReqRefreshGameObserveAuth) (*ResRefreshGameObserveAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshGameObserveAuth not implemented")
}
func (UnimplementedLobbyServer) FetchActivityBuff(context.Context, *ReqCommon) (*ResActivityBuff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchActivityBuff not implemented")
}
func (UnimplementedLobbyServer) UpgradeActivityBuff(context.Context, *ReqUpgradeActivityBuff) (*ResActivityBuff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeActivityBuff not implemented")
}
func (UnimplementedLobbyServer) UpgradeChallenge(context.Context, *ReqCommon) (*ResUpgradeChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeChallenge not implemented")
}
func (UnimplementedLobbyServer) RefreshChallenge(context.Context, *ReqCommon) (*ResRefreshChallenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshChallenge not implemented")
}
func (UnimplementedLobbyServer) FetchChallengeInfo(context.Context, *ReqCommon) (*ResFetchChallengeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChallengeInfo not implemented")
}
func (UnimplementedLobbyServer) ForceCompleteChallengeTask(context.Context, *ReqForceCompleteChallengeTask) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceCompleteChallengeTask not implemented")
}
func (UnimplementedLobbyServer) FetchChallengeSeason(context.Context, *ReqCommon) (*ResChallengeSeasonInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchChallengeSeason not implemented")
}
func (UnimplementedLobbyServer) ReceiveChallengeRankReward(context.Context, *ReqReceiveChallengeRankReward) (*ResReceiveChallengeRankReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveChallengeRankReward not implemented")
}
func (UnimplementedLobbyServer) FetchABMatchInfo(context.Context, *ReqCommon) (*ResFetchABMatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchABMatchInfo not implemented")
}
func (UnimplementedLobbyServer) BuyInABMatch(context.Context, *ReqBuyInABMatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyInABMatch not implemented")
}
func (UnimplementedLobbyServer) ReceiveABMatchReward(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveABMatchReward not implemented")
}
func (UnimplementedLobbyServer) QuitABMatch(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitABMatch not implemented")
}
func (UnimplementedLobbyServer) StartUnifiedMatch(context.Context, *ReqStartUnifiedMatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUnifiedMatch not implemented")
}
func (UnimplementedLobbyServer) CancelUnifiedMatch(context.Context, *ReqCancelUnifiedMatch) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUnifiedMatch not implemented")
}
func (UnimplementedLobbyServer) FetchGamePointRank(context.Context, *ReqGamePointRank) (*ResGamePointRank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGamePointRank not implemented")
}
func (UnimplementedLobbyServer) FetchSelfGamePointRank(context.Context, *ReqGamePointRank) (*ResFetchSelfGamePointRank, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchSelfGamePointRank not implemented")
}
func (UnimplementedLobbyServer) ReadSNS(context.Context, *ReqReadSNS) (*ResReadSNS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSNS not implemented")
}
func (UnimplementedLobbyServer) ReplySNS(context.Context, *ReqReplySNS) (*ResReplySNS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplySNS not implemented")
}
func (UnimplementedLobbyServer) LikeSNS(context.Context, *ReqLikeSNS) (*ResLikeSNS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeSNS not implemented")
}
func (UnimplementedLobbyServer) DigMine(context.Context, *ReqDigMine) (*ResDigMine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DigMine not implemented")
}
func (UnimplementedLobbyServer) FetchLastPrivacy(context.Context, *ReqFetchLastPrivacy) (*ResFetchLastPrivacy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchLastPrivacy not implemented")
}
func (UnimplementedLobbyServer) CheckPrivacy(context.Context, *ReqCheckPrivacy) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPrivacy not implemented")
}
func (UnimplementedLobbyServer) ResponseCaptcha(context.Context, *ReqResponseCaptcha) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseCaptcha not implemented")
}
func (UnimplementedLobbyServer) FetchRPGBattleHistory(context.Context, *ReqFetchRPGBattleHistory) (*ResFetchRPGBattleHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchRPGBattleHistory not implemented")
}
func (UnimplementedLobbyServer) ReceiveRPGRewards(context.Context, *ReqReceiveRPGRewards) (*ResReceiveRPGRewards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRPGRewards not implemented")
}
func (UnimplementedLobbyServer) BuyArenaTicket(context.Context, *ReqBuyArenaTicket) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyArenaTicket not implemented")
}
func (UnimplementedLobbyServer) EnterArena(context.Context, *ReqEnterArena) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterArena not implemented")
}
func (UnimplementedLobbyServer) ReceiveArenaReward(context.Context, *ReqArenaReward) (*ResArenaReward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveArenaReward not implemented")
}
func (UnimplementedLobbyServer) FetchOBToken(context.Context, *ReqFetchOBToken) (*ResFetchOBToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOBToken not implemented")
}
func (UnimplementedLobbyServer) ReceiveCharacterRewards(context.Context, *ReqReceiveCharacterRewards) (*ResReceiveCharacterRewards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveCharacterRewards not implemented")
}
func (UnimplementedLobbyServer) FeedActivityFeed(context.Context, *ReqFeedActivityFeed) (*ResFeedActivityFeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedActivityFeed not implemented")
}
func (UnimplementedLobbyServer) SendActivityGiftToFriend(context.Context, *ReqSendActivityGiftToFriend) (*ResSendActivityGiftToFriend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActivityGiftToFriend not implemented")
}
func (UnimplementedLobbyServer) ReceiveActivityGift(context.Context, *ReqReceiveActivityGift) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveActivityGift not implemented")
}
func (UnimplementedLobbyServer) FetchFriendFeedActivityData(context.Context, *ReqFetchFriendFeedActivityData) (*ResFetchFriendFeedActivityData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFriendFeedActivityData not implemented")
}
func (UnimplementedLobbyServer) OpenPreChestItem(context.Context, *ReqOpenPreChestItem) (*ResOpenPreChestItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPreChestItem not implemented")
}
func (UnimplementedLobbyServer) mustEmbedUnimplementedLobbyServer() {}

// UnsafeLobbyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LobbyServer will
// result in compilation errors.
type UnsafeLobbyServer interface {
	mustEmbedUnimplementedLobbyServer()
}

func RegisterLobbyServer(s grpc.ServiceRegistrar, srv LobbyServer) {
	s.RegisterService(&Lobby_ServiceDesc, srv)
}

func _Lobby_FetchConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchConnectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchConnectionInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignupAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Signup(ctx, req.(*ReqSignupAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Login(ctx, req.(*ReqLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LoginSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LoginSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/loginSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LoginSuccess(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_EmailLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEmailLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).EmailLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/emailLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).EmailLogin(ctx, req.(*ReqEmailLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Auth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/oauth2Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Auth(ctx, req.(*ReqOauth2Auth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Check)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/oauth2Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Check(ctx, req.(*ReqOauth2Check))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Signup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/oauth2Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Signup(ctx, req.(*ReqOauth2Signup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Oauth2Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOauth2Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Oauth2Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/oauth2Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Oauth2Login(ctx, req.(*ReqOauth2Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DmmPreLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDMMPreLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DmmPreLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/dmmPreLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DmmPreLogin(ctx, req.(*ReqDMMPreLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreatePhoneVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreatePhoneVerifyCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreatePhoneVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createPhoneVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreatePhoneVerifyCode(ctx, req.(*ReqCreatePhoneVerifyCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateEmailVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateEmailVerifyCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateEmailVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createEmailVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateEmailVerifyCode(ctx, req.(*ReqCreateEmailVerifyCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerfifyCodeForSecure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerifyCodeForSecure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerfifyCodeForSecure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/verfifyCodeForSecure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerfifyCodeForSecure(ctx, req.(*ReqVerifyCodeForSecure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BindPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindPhoneNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BindPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/bindPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BindPhoneNumber(ctx, req.(*ReqBindPhoneNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UnbindPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUnbindPhoneNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UnbindPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/unbindPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UnbindPhoneNumber(ctx, req.(*ReqUnbindPhoneNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchPhoneLoginBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchPhoneLoginBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchPhoneLoginBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchPhoneLoginBind(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreatePhoneLoginBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreatePhoneLoginBind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreatePhoneLoginBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createPhoneLoginBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreatePhoneLoginBind(ctx, req.(*ReqCreatePhoneLoginBind))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/bindEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BindEmail(ctx, req.(*ReqBindEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/modifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyPassword(ctx, req.(*ReqModifyPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBindAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/bindAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BindAccount(ctx, req.(*ReqBindAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLogout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Logout(ctx, req.(*ReqLogout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_Heatbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeatBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).Heatbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/heatbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).Heatbeat(ctx, req.(*ReqHeatBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LoginBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLoginBeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LoginBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/loginBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LoginBeat(ctx, req.(*ReqLoginBeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateNickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateNickname(ctx, req.(*ReqCreateNickname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyNickname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/modifyNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyNickname(ctx, req.(*ReqModifyNickname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyBirthday)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/modifyBirthday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyBirthday(ctx, req.(*ReqModifyBirthday))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRoom(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateRoom(ctx, req.(*ReqCreateRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/joinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).JoinRoom(ctx, req.(*ReqJoinRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/leaveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveRoom(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadyPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomReady)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadyPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/readyPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadyPlay(ctx, req.(*ReqRoomReady))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DressingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomDressing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DressingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/dressingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DressingStatus(ctx, req.(*ReqRoomDressing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomStart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/startRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartRoom(ctx, req.(*ReqRoomStart))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_KickPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRoomKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).KickPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/kickPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).KickPlayer(ctx, req.(*ReqRoomKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifyRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifyRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifyRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/modifyRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifyRoom(ctx, req.(*ReqModifyRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_MatchGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinMatchQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).MatchGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/matchGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).MatchGame(ctx, req.(*ReqJoinMatchQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelMatchQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/cancelMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelMatch(ctx, req.(*ReqCancelMatchQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountInfo(ctx, req.(*ReqAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/changeAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeAvatar(ctx, req.(*ReqChangeAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveVersionReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveVersionReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveVersionReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveVersionReward(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountStatisticInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountStatisticInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountStatisticInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAccountStatisticInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountStatisticInfo(ctx, req.(*ReqAccountStatisticInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountChallengeRankInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountChallengeRankInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAccountChallengeRankInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountChallengeRankInfo(ctx, req.(*ReqAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountCharacterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountCharacterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAccountCharacterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountCharacterInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ShopPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShopPurchase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ShopPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/shopPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ShopPurchase(ctx, req.(*ReqShopPurchase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchGameRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecord(ctx, req.(*ReqGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/readGameRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadGameRecord(ctx, req.(*ReqGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecordList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchGameRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecordList(ctx, req.(*ReqGameRecordList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCollectedGameRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCollectedGameRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCollectedGameRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCollectedGameRecordList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameRecordsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameRecordsDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameRecordsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchGameRecordsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameRecordsDetail(ctx, req.(*ReqGameRecordsDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AddCollectedGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddCollectedGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AddCollectedGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/addCollectedGameRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AddCollectedGameRecord(ctx, req.(*ReqAddCollectedGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RemoveCollectedGameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRemoveCollectedGameRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RemoveCollectedGameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/removeCollectedGameRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RemoveCollectedGameRecord(ctx, req.(*ReqRemoveCollectedGameRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCollectedGameRecordRemarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCollectedGameRecordRemarks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCollectedGameRecordRemarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/changeCollectedGameRecordRemarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCollectedGameRecordRemarks(ctx, req.(*ReqChangeCollectedGameRecordRemarks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchLevelLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLevelLeaderboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchLevelLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchLevelLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchLevelLeaderboard(ctx, req.(*ReqLevelLeaderboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchChallengeLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChallangeLeaderboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchChallengeLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchChallengeLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchChallengeLeaderboard(ctx, req.(*ReqChallangeLeaderboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMutiChallengeLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMutiChallengeLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMutiChallengeLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchMutiChallengeLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMutiChallengeLevel(ctx, req.(*ReqMutiChallengeLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMultiAccountBrief_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMultiAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMultiAccountBrief(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchMultiAccountBrief",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMultiAccountBrief(ctx, req.(*ReqMultiAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchFriendList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchFriendApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchFriendApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchFriendApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchFriendApplyList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ApplyFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqApplyFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ApplyFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/applyFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ApplyFriend(ctx, req.(*ReqApplyFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_HandleFriendApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHandleFriendApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).HandleFriendApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/handleFriendApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).HandleFriendApply(ctx, req.(*ReqHandleFriendApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRemoveFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/removeFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RemoveFriend(ctx, req.(*ReqRemoveFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SearchAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchAccountById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SearchAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/searchAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SearchAccountById(ctx, req.(*ReqSearchAccountById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SearchAccountByPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchAccountByPattern)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SearchAccountByPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/searchAccountByPattern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SearchAccountByPattern(ctx, req.(*ReqSearchAccountByPattern))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountState(ctx, req.(*ReqAccountList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchBagInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchBagInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchBagInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchBagInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseBagItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseBagItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseBagItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/useBagItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseBagItem(ctx, req.(*ReqUseBagItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenManualItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenManualItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenManualItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/openManualItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenManualItem(ctx, req.(*ReqOpenManualItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenRandomRewardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenRandomRewardItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenRandomRewardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/openRandomRewardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenRandomRewardItem(ctx, req.(*ReqOpenRandomRewardItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenAllRewardItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenAllRewardItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenAllRewardItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/openAllRewardItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenAllRewardItem(ctx, req.(*ReqOpenAllRewardItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ComposeShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqComposeShard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ComposeShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/composeShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ComposeShard(ctx, req.(*ReqComposeShard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAnnouncement(ctx, req.(*ReqFetchAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadAnnouncement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/readAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadAnnouncement(ctx, req.(*ReqReadAnnouncement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMailInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMailInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchMailInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMailInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadMail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/readMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadMail(ctx, req.(*ReqReadMail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DeleteMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteMail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DeleteMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/deleteMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DeleteMail(ctx, req.(*ReqDeleteMail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_TakeAttachmentFromMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTakeAttachment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).TakeAttachmentFromMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/takeAttachmentFromMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).TakeAttachmentFromMail(ctx, req.(*ReqTakeAttachment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveAchievementReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveAchievementReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveAchievementReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveAchievementReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveAchievementReward(ctx, req.(*ReqReceiveAchievementReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveAchievementGroupReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveAchievementGroupReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveAchievementGroupReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveAchievementGroupReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveAchievementGroupReward(ctx, req.(*ReqReceiveAchievementGroupReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAchievementRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAchievementRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAchievementRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAchievementRate(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAchievement(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyShiLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyShiLian)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyShiLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/buyShiLian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyShiLian(ctx, req.(*ReqBuyShiLian))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_MatchShiLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).MatchShiLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/matchShiLian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).MatchShiLian(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GoNextShiLian_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GoNextShiLian(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/goNextShiLian",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GoNextShiLian(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateClientValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateClientValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateClientValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/updateClientValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateClientValue(ctx, req.(*ReqUpdateClientValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchClientValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchClientValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchClientValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchClientValue(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ClientMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ClientMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/clientMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ClientMessage(ctx, req.(*ReqClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCurrentMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCurrentMatchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCurrentMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCurrentMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCurrentMatchInfo(ctx, req.(*ReqCurrentMatchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UserComplain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserComplain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UserComplain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/userComplain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UserComplain(ctx, req.(*ReqUserComplain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchReviveCoinInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchReviveCoinInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchReviveCoinInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchReviveCoinInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainReviveCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainReviveCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/gainReviveCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainReviveCoin(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchDailyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchDailyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchDailyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchDailyTask(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshDailyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRefreshDailyTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshDailyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/refreshDailyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshDailyTask(ctx, req.(*ReqRefreshDailyTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseGiftCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseGiftCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseGiftCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/useGiftCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseGiftCode(ctx, req.(*ReqUseGiftCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseSpecialGiftCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseGiftCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseSpecialGiftCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/useSpecialGiftCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseSpecialGiftCode(ctx, req.(*ReqUseGiftCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchTitleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchTitleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchTitleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchTitleList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/useTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseTitle(ctx, req.(*ReqUseTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SendClientMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SendClientMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/sendClientMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SendClientMessage(ctx, req.(*ReqSendClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameLiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameLiveInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameLiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchGameLiveInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameLiveInfo(ctx, req.(*ReqGameLiveInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameLiveLeftSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameLiveLeftSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameLiveLeftSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchGameLiveLeftSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameLiveLeftSegment(ctx, req.(*ReqGameLiveLeftSegment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGameLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGameLiveList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGameLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchGameLiveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGameLiveList(ctx, req.(*ReqGameLiveList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommentSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommentSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCommentSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommentSetting(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateCommentSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateCommentSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateCommentSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/updateCommentSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateCommentSetting(ctx, req.(*ReqUpdateCommentSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCommentList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommentList(ctx, req.(*ReqFetchCommentList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommentContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCommentContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommentContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCommentContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommentContent(ctx, req.(*ReqFetchCommentContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLeaveComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/leaveComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveComment(ctx, req.(*ReqLeaveComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/deleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DeleteComment(ctx, req.(*ReqDeleteComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateReadComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateReadComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateReadComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/updateReadComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateReadComment(ctx, req.(*ReqUpdateReadComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRollingNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRollingNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchRollingNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRollingNotice(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchServerTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchServerTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchServerTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchServerTime(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchPlatformProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPlatformBillingProducts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchPlatformProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchPlatformProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchPlatformProducts(ctx, req.(*ReqPlatformBillingProducts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelGooglePlayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelGooglePlayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelGooglePlayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/cancelGooglePlayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelGooglePlayOrder(ctx, req.(*ReqCancelGooglePlayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenChest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenChest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenChest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/openChest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenChest(ctx, req.(*ReqOpenChest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyFromChestShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyFromChestShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyFromChestShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/buyFromChestShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyFromChestShop(ctx, req.(*ReqBuyFromChestShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchDailySignInInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchDailySignInInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchDailySignInInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchDailySignInInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DoDailySignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DoDailySignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/doDailySignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DoDailySignIn(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DoActivitySignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDoActivitySignIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DoActivitySignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/doActivitySignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DoActivitySignIn(ctx, req.(*ReqDoActivitySignIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCharacterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCharacterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCharacterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCharacterInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateCharacterSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateCharacterSort)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateCharacterSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/updateCharacterSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateCharacterSort(ctx, req.(*ReqUpdateCharacterSort))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeMainCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeMainCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeMainCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/changeMainCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeMainCharacter(ctx, req.(*ReqChangeMainCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCharacterSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCharacterSkin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCharacterSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/changeCharacterSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCharacterSkin(ctx, req.(*ReqChangeCharacterSkin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCharacterView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCharacterView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCharacterView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/changeCharacterView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCharacterView(ctx, req.(*ReqChangeCharacterView))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SetHiddenCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSetHiddenCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SetHiddenCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/setHiddenCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SetHiddenCharacter(ctx, req.(*ReqSetHiddenCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SendGiftToCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendGiftToCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SendGiftToCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/sendGiftToCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SendGiftToCharacter(ctx, req.(*ReqSendGiftToCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SellItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSellItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SellItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/sellItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SellItem(ctx, req.(*ReqSellItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommonView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommonView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCommonView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommonView(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ChangeCommonView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangeCommonView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ChangeCommonView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/changeCommonView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ChangeCommonView(ctx, req.(*ReqChangeCommonView))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SaveCommonViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSaveCommonViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SaveCommonViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/saveCommonViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SaveCommonViews(ctx, req.(*ReqSaveCommonViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCommonViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommonViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCommonViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCommonViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCommonViews(ctx, req.(*ReqCommonViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAllCommonViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAllCommonViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAllCommonViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAllCommonViews(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UseCommonView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUseCommonView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UseCommonView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/useCommonView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UseCommonView(ctx, req.(*ReqUseCommonView))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeCharacter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/upgradeCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeCharacter(ctx, req.(*ReqUpgradeCharacter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_AddFinishedEnding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFinishedEnding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).AddFinishedEnding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/addFinishedEnding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).AddFinishedEnding(ctx, req.(*ReqFinishedEnding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveEndingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFinishedEnding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveEndingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveEndingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveEndingReward(ctx, req.(*ReqFinishedEnding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GameMasterCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGMCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GameMasterCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/gameMasterCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GameMasterCommand(ctx, req.(*ReqGMCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchShopInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchShopInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchShopInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchShopInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyFromShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyFromShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyFromShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/buyFromShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyFromShop(ctx, req.(*ReqBuyFromShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyFromZHP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyFromZHP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyFromZHP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/buyFromZHP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyFromZHP(ctx, req.(*ReqBuyFromZHP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshZHPShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReshZHPShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshZHPShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/refreshZHPShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshZHPShop(ctx, req.(*ReqReshZHPShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMonthTicketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMonthTicketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchMonthTicketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMonthTicketInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_PayMonthTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPayMonthTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).PayMonthTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/payMonthTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).PayMonthTicket(ctx, req.(*ReqPayMonthTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/exchangeCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeCurrency(ctx, req.(*ReqExchangeCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeChestStone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeChestStone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/exchangeChestStone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeChestStone(ctx, req.(*ReqExchangeCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeDiamond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeCurrency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeDiamond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/exchangeDiamond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeDiamond(ctx, req.(*ReqExchangeCurrency))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchServerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchServerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchServerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchServerSettings(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAccountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountSettings(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateAccountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateAccountSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateAccountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/updateAccountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateAccountSettings(ctx, req.(*ReqUpdateAccountSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchModNicknameTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchModNicknameTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchModNicknameTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchModNicknameTime(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateWechatNativeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateWechatNativeOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateWechatNativeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createWechatNativeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateWechatNativeOrder(ctx, req.(*ReqCreateWechatNativeOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateWechatAppOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateWechatAppOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateWechatAppOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createWechatAppOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateWechatAppOrder(ctx, req.(*ReqCreateWechatAppOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateAlipayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateAlipayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateAlipayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createAlipayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateAlipayOrder(ctx, req.(*ReqCreateAlipayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateAlipayScanOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateAlipayScanOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateAlipayScanOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createAlipayScanOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateAlipayScanOrder(ctx, req.(*ReqCreateAlipayScanOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateAlipayAppOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateAlipayAppOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateAlipayAppOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createAlipayAppOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateAlipayAppOrder(ctx, req.(*ReqCreateAlipayAppOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPCreditCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPCreditCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPCreditCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createJPCreditCardOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPCreditCardOrder(ctx, req.(*ReqCreateJPCreditCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPPaypalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPPaypalOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPPaypalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createJPPaypalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPPaypalOrder(ctx, req.(*ReqCreateJPPaypalOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPAuOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPAuOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPAuOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createJPAuOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPAuOrder(ctx, req.(*ReqCreateJPAuOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPDocomoOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPDocomoOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPDocomoOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createJPDocomoOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPDocomoOrder(ctx, req.(*ReqCreateJPDocomoOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPWebMoneyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPWebMoneyOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPWebMoneyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createJPWebMoneyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPWebMoneyOrder(ctx, req.(*ReqCreateJPWebMoneyOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateJPSoftbankOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateJPSoftbankOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateJPSoftbankOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createJPSoftbankOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateJPSoftbankOrder(ctx, req.(*ReqCreateJPSoftbankOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENPaypalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENPaypalOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENPaypalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createENPaypalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENPaypalOrder(ctx, req.(*ReqCreateENPaypalOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENMasterCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENMasterCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENMasterCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createENMasterCardOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENMasterCardOrder(ctx, req.(*ReqCreateENMasterCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENVisaOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENVisaOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENVisaOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createENVisaOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENVisaOrder(ctx, req.(*ReqCreateENVisaOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENJCBOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENJCBOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENJCBOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createENJCBOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENJCBOrder(ctx, req.(*ReqCreateENJCBOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateENAlipayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateENAlipayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateENAlipayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createENAlipayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateENAlipayOrder(ctx, req.(*ReqCreateENAlipayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateDMMOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateDMMOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateDMMOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createDMMOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateDMMOrder(ctx, req.(*ReqCreateDMMOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateIAPOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateIAPOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateIAPOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createIAPOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateIAPOrder(ctx, req.(*ReqCreateIAPOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateSteamOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateSteamOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateSteamOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createSteamOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateSteamOrder(ctx, req.(*ReqCreateSteamOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerifySteamOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerifySteamOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerifySteamOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/verifySteamOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerifySteamOrder(ctx, req.(*ReqVerifySteamOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateMyCardAndroidOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateMyCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateMyCardAndroidOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createMyCardAndroidOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateMyCardAndroidOrder(ctx, req.(*ReqCreateMyCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateMyCardWebOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateMyCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateMyCardWebOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createMyCardWebOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateMyCardWebOrder(ctx, req.(*ReqCreateMyCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreatePaypalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreatePaypalOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreatePaypalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createPaypalOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreatePaypalOrder(ctx, req.(*ReqCreatePaypalOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateXsollaOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateXsollaOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateXsollaOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createXsollaOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateXsollaOrder(ctx, req.(*ReqCreateXsollaOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerifyMyCardOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerifyMyCardOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerifyMyCardOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/verifyMyCardOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerifyMyCardOrder(ctx, req.(*ReqVerifyMyCardOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_VerificationIAPOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVerificationIAPOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).VerificationIAPOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/verificationIAPOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).VerificationIAPOrder(ctx, req.(*ReqVerificationIAPOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateYostarSDKOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateYostarOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateYostarSDKOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createYostarSDKOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateYostarSDKOrder(ctx, req.(*ReqCreateYostarOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateBillingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateBillingOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateBillingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createBillingOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateBillingOrder(ctx, req.(*ReqCreateBillingOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SolveGooglePlayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSolveGooglePlayOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SolveGooglePlayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/solveGooglePlayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SolveGooglePlayOrder(ctx, req.(*ReqSolveGooglePlayOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SolveGooglePayOrderV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSolveGooglePlayOrderV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SolveGooglePayOrderV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/solveGooglePayOrderV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SolveGooglePayOrderV3(ctx, req.(*ReqSolveGooglePlayOrderV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchMisc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchMisc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchMisc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchMisc(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ModifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqModifySignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ModifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/modifySignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ModifySignature(ctx, req.(*ReqModifySignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchIDCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchIDCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchIDCardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchIDCardInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpdateIDCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateIDCardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpdateIDCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/updateIDCardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpdateIDCardInfo(ctx, req.(*ReqUpdateIDCardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchVipReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchVipReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchVipReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchVipReward(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainVipReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainVipReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainVipReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/gainVipReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainVipReward(ctx, req.(*ReqGainVipReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRefundOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRefundOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchRefundOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRefundOrder(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCustomizedContestList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestList(ctx, req.(*ReqFetchCustomizedContestList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestExtendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestExtendInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestExtendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCustomizedContestExtendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestExtendInfo(ctx, req.(*ReqFetchCustomizedContestExtendInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestAuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCustomizedContestAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestAuthInfo(ctx, req.(*ReqFetchCustomizedContestAuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_EnterCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEnterCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).EnterCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/enterCustomizedContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).EnterCustomizedContest(ctx, req.(*ReqEnterCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/leaveCustomizedContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveCustomizedContest(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestOnlineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestOnlineInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestOnlineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCustomizedContestOnlineInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestOnlineInfo(ctx, req.(*ReqFetchCustomizedContestOnlineInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestByContestId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestByContestId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestByContestId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCustomizedContestByContestId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestByContestId(ctx, req.(*ReqFetchCustomizedContestByContestId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStartCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/startCustomizedContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartCustomizedContest(ctx, req.(*ReqStartCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StopCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StopCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/stopCustomizedContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StopCustomizedContest(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_JoinCustomizedContestChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqJoinCustomizedContestChatRoom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).JoinCustomizedContestChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/joinCustomizedContestChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).JoinCustomizedContestChatRoom(ctx, req.(*ReqJoinCustomizedContestChatRoom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LeaveCustomizedContestChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LeaveCustomizedContestChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/leaveCustomizedContestChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LeaveCustomizedContestChatRoom(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SayChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSayChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SayChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/sayChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SayChatMessage(ctx, req.(*ReqSayChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestGameRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestGameRecords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestGameRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCustomizedContestGameRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestGameRecords(ctx, req.(*ReqFetchCustomizedContestGameRecords))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchCustomizedContestGameLiveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchCustomizedContestGameLiveList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchCustomizedContestGameLiveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchCustomizedContestGameLiveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchCustomizedContestGameLiveList(ctx, req.(*ReqFetchCustomizedContestGameLiveList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FollowCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTargetCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FollowCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/followCustomizedContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FollowCustomizedContest(ctx, req.(*ReqTargetCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UnfollowCustomizedContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqTargetCustomizedContest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UnfollowCustomizedContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/unfollowCustomizedContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UnfollowCustomizedContest(ctx, req.(*ReqTargetCustomizedContest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchActivityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityList(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchAccountActivityData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchAccountActivityData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchAccountActivityData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchAccountActivityData(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ExchangeActivityItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqExchangeActivityItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ExchangeActivityItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/exchangeActivityItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ExchangeActivityItem(ctx, req.(*ReqExchangeActivityItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/completeActivityTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteActivityTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteActivityFlipTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteActivityFlipTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/completeActivityFlipTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteActivityFlipTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompletePeriodActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompletePeriodActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/completePeriodActivityTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompletePeriodActivityTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteRandomActivityTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteActivityTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteRandomActivityTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/completeRandomActivityTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteRandomActivityTask(ctx, req.(*ReqCompleteActivityTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveActivityFlipTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveActivityFlipTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveActivityFlipTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveActivityFlipTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveActivityFlipTask(ctx, req.(*ReqReceiveActivityFlipTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CompleteSegmentTaskReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCompleteSegmentTaskReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CompleteSegmentTaskReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/completeSegmentTaskReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CompleteSegmentTaskReward(ctx, req.(*ReqCompleteSegmentTaskReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityFlipInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchActivityFlipInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityFlipInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchActivityFlipInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityFlipInfo(ctx, req.(*ReqFetchActivityFlipInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainAccumulatedPointActivityReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainAccumulatedPointActivityReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainAccumulatedPointActivityReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/gainAccumulatedPointActivityReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainAccumulatedPointActivityReward(ctx, req.(*ReqGainAccumulatedPointActivityReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainMultiPointActivityReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainMultiPointActivityReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainMultiPointActivityReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/gainMultiPointActivityReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainMultiPointActivityReward(ctx, req.(*ReqGainMultiPointActivityReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRankPointLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchRankPointLeaderboard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRankPointLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchRankPointLeaderboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRankPointLeaderboard(ctx, req.(*ReqFetchRankPointLeaderboard))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_GainRankPointReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGainRankPointReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).GainRankPointReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/gainRankPointReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).GainRankPointReward(ctx, req.(*ReqGainRankPointReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RichmanActivityNextMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRichmanNextMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RichmanActivityNextMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/richmanActivityNextMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RichmanActivityNextMove(ctx, req.(*ReqRichmanNextMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RichmanAcitivitySpecialMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRichmanSpecialMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RichmanAcitivitySpecialMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/richmanAcitivitySpecialMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RichmanAcitivitySpecialMove(ctx, req.(*ReqRichmanSpecialMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RichmanActivityChestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRichmanChestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RichmanActivityChestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/richmanActivityChestInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RichmanActivityChestInfo(ctx, req.(*ReqRichmanChestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CreateGameObserveAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateGameObserveAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CreateGameObserveAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/createGameObserveAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CreateGameObserveAuth(ctx, req.(*ReqCreateGameObserveAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshGameObserveAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRefreshGameObserveAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshGameObserveAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/refreshGameObserveAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshGameObserveAuth(ctx, req.(*ReqRefreshGameObserveAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchActivityBuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchActivityBuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchActivityBuff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchActivityBuff(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeActivityBuff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpgradeActivityBuff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeActivityBuff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/upgradeActivityBuff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeActivityBuff(ctx, req.(*ReqUpgradeActivityBuff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_UpgradeChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).UpgradeChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/upgradeChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).UpgradeChallenge(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_RefreshChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).RefreshChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/refreshChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).RefreshChallenge(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchChallengeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchChallengeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchChallengeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchChallengeInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ForceCompleteChallengeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqForceCompleteChallengeTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ForceCompleteChallengeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/forceCompleteChallengeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ForceCompleteChallengeTask(ctx, req.(*ReqForceCompleteChallengeTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchChallengeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchChallengeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchChallengeSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchChallengeSeason(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveChallengeRankReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveChallengeRankReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveChallengeRankReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveChallengeRankReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveChallengeRankReward(ctx, req.(*ReqReceiveChallengeRankReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchABMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchABMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchABMatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchABMatchInfo(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyInABMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyInABMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyInABMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/buyInABMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyInABMatch(ctx, req.(*ReqBuyInABMatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveABMatchReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveABMatchReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveABMatchReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveABMatchReward(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_QuitABMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).QuitABMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/quitABMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).QuitABMatch(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_StartUnifiedMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStartUnifiedMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).StartUnifiedMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/startUnifiedMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).StartUnifiedMatch(ctx, req.(*ReqStartUnifiedMatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CancelUnifiedMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCancelUnifiedMatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CancelUnifiedMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/cancelUnifiedMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CancelUnifiedMatch(ctx, req.(*ReqCancelUnifiedMatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchGamePointRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGamePointRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchGamePointRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchGamePointRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchGamePointRank(ctx, req.(*ReqGamePointRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchSelfGamePointRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGamePointRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchSelfGamePointRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchSelfGamePointRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchSelfGamePointRank(ctx, req.(*ReqGamePointRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReadSNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReadSNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReadSNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/readSNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReadSNS(ctx, req.(*ReqReadSNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReplySNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReplySNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReplySNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/replySNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReplySNS(ctx, req.(*ReqReplySNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_LikeSNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLikeSNS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).LikeSNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/likeSNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).LikeSNS(ctx, req.(*ReqLikeSNS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_DigMine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDigMine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).DigMine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/digMine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).DigMine(ctx, req.(*ReqDigMine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchLastPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchLastPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchLastPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchLastPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchLastPrivacy(ctx, req.(*ReqFetchLastPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_CheckPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).CheckPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/checkPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).CheckPrivacy(ctx, req.(*ReqCheckPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ResponseCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResponseCaptcha)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ResponseCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/responseCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ResponseCaptcha(ctx, req.(*ReqResponseCaptcha))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchRPGBattleHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchRPGBattleHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchRPGBattleHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchRPGBattleHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchRPGBattleHistory(ctx, req.(*ReqFetchRPGBattleHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveRPGRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveRPGRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveRPGRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveRPGRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveRPGRewards(ctx, req.(*ReqReceiveRPGRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_BuyArenaTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBuyArenaTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).BuyArenaTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/buyArenaTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).BuyArenaTicket(ctx, req.(*ReqBuyArenaTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_EnterArena_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqEnterArena)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).EnterArena(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/enterArena",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).EnterArena(ctx, req.(*ReqEnterArena))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveArenaReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqArenaReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveArenaReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveArenaReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveArenaReward(ctx, req.(*ReqArenaReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchOBToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchOBToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchOBToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchOBToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchOBToken(ctx, req.(*ReqFetchOBToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveCharacterRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveCharacterRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveCharacterRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveCharacterRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveCharacterRewards(ctx, req.(*ReqReceiveCharacterRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FeedActivityFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFeedActivityFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FeedActivityFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/feedActivityFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FeedActivityFeed(ctx, req.(*ReqFeedActivityFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_SendActivityGiftToFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendActivityGiftToFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).SendActivityGiftToFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/sendActivityGiftToFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).SendActivityGiftToFriend(ctx, req.(*ReqSendActivityGiftToFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_ReceiveActivityGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqReceiveActivityGift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).ReceiveActivityGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/receiveActivityGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).ReceiveActivityGift(ctx, req.(*ReqReceiveActivityGift))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_FetchFriendFeedActivityData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFetchFriendFeedActivityData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).FetchFriendFeedActivityData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/fetchFriendFeedActivityData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).FetchFriendFeedActivityData(ctx, req.(*ReqFetchFriendFeedActivityData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lobby_OpenPreChestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqOpenPreChestItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LobbyServer).OpenPreChestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.Lobby/openPreChestItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LobbyServer).OpenPreChestItem(ctx, req.(*ReqOpenPreChestItem))
	}
	return interceptor(ctx, in, info, handler)
}

// Lobby_ServiceDesc is the grpc.ServiceDesc for Lobby service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lobby_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lq.Lobby",
	HandlerType: (*LobbyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fetchConnectionInfo",
			Handler:    _Lobby_FetchConnectionInfo_Handler,
		},
		{
			MethodName: "signup",
			Handler:    _Lobby_Signup_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Lobby_Login_Handler,
		},
		{
			MethodName: "loginSuccess",
			Handler:    _Lobby_LoginSuccess_Handler,
		},
		{
			MethodName: "emailLogin",
			Handler:    _Lobby_EmailLogin_Handler,
		},
		{
			MethodName: "oauth2Auth",
			Handler:    _Lobby_Oauth2Auth_Handler,
		},
		{
			MethodName: "oauth2Check",
			Handler:    _Lobby_Oauth2Check_Handler,
		},
		{
			MethodName: "oauth2Signup",
			Handler:    _Lobby_Oauth2Signup_Handler,
		},
		{
			MethodName: "oauth2Login",
			Handler:    _Lobby_Oauth2Login_Handler,
		},
		{
			MethodName: "dmmPreLogin",
			Handler:    _Lobby_DmmPreLogin_Handler,
		},
		{
			MethodName: "createPhoneVerifyCode",
			Handler:    _Lobby_CreatePhoneVerifyCode_Handler,
		},
		{
			MethodName: "createEmailVerifyCode",
			Handler:    _Lobby_CreateEmailVerifyCode_Handler,
		},
		{
			MethodName: "verfifyCodeForSecure",
			Handler:    _Lobby_VerfifyCodeForSecure_Handler,
		},
		{
			MethodName: "bindPhoneNumber",
			Handler:    _Lobby_BindPhoneNumber_Handler,
		},
		{
			MethodName: "unbindPhoneNumber",
			Handler:    _Lobby_UnbindPhoneNumber_Handler,
		},
		{
			MethodName: "fetchPhoneLoginBind",
			Handler:    _Lobby_FetchPhoneLoginBind_Handler,
		},
		{
			MethodName: "createPhoneLoginBind",
			Handler:    _Lobby_CreatePhoneLoginBind_Handler,
		},
		{
			MethodName: "bindEmail",
			Handler:    _Lobby_BindEmail_Handler,
		},
		{
			MethodName: "modifyPassword",
			Handler:    _Lobby_ModifyPassword_Handler,
		},
		{
			MethodName: "bindAccount",
			Handler:    _Lobby_BindAccount_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _Lobby_Logout_Handler,
		},
		{
			MethodName: "heatbeat",
			Handler:    _Lobby_Heatbeat_Handler,
		},
		{
			MethodName: "loginBeat",
			Handler:    _Lobby_LoginBeat_Handler,
		},
		{
			MethodName: "createNickname",
			Handler:    _Lobby_CreateNickname_Handler,
		},
		{
			MethodName: "modifyNickname",
			Handler:    _Lobby_ModifyNickname_Handler,
		},
		{
			MethodName: "modifyBirthday",
			Handler:    _Lobby_ModifyBirthday_Handler,
		},
		{
			MethodName: "fetchRoom",
			Handler:    _Lobby_FetchRoom_Handler,
		},
		{
			MethodName: "createRoom",
			Handler:    _Lobby_CreateRoom_Handler,
		},
		{
			MethodName: "joinRoom",
			Handler:    _Lobby_JoinRoom_Handler,
		},
		{
			MethodName: "leaveRoom",
			Handler:    _Lobby_LeaveRoom_Handler,
		},
		{
			MethodName: "readyPlay",
			Handler:    _Lobby_ReadyPlay_Handler,
		},
		{
			MethodName: "dressingStatus",
			Handler:    _Lobby_DressingStatus_Handler,
		},
		{
			MethodName: "startRoom",
			Handler:    _Lobby_StartRoom_Handler,
		},
		{
			MethodName: "kickPlayer",
			Handler:    _Lobby_KickPlayer_Handler,
		},
		{
			MethodName: "modifyRoom",
			Handler:    _Lobby_ModifyRoom_Handler,
		},
		{
			MethodName: "matchGame",
			Handler:    _Lobby_MatchGame_Handler,
		},
		{
			MethodName: "cancelMatch",
			Handler:    _Lobby_CancelMatch_Handler,
		},
		{
			MethodName: "fetchAccountInfo",
			Handler:    _Lobby_FetchAccountInfo_Handler,
		},
		{
			MethodName: "changeAvatar",
			Handler:    _Lobby_ChangeAvatar_Handler,
		},
		{
			MethodName: "receiveVersionReward",
			Handler:    _Lobby_ReceiveVersionReward_Handler,
		},
		{
			MethodName: "fetchAccountStatisticInfo",
			Handler:    _Lobby_FetchAccountStatisticInfo_Handler,
		},
		{
			MethodName: "fetchAccountChallengeRankInfo",
			Handler:    _Lobby_FetchAccountChallengeRankInfo_Handler,
		},
		{
			MethodName: "fetchAccountCharacterInfo",
			Handler:    _Lobby_FetchAccountCharacterInfo_Handler,
		},
		{
			MethodName: "shopPurchase",
			Handler:    _Lobby_ShopPurchase_Handler,
		},
		{
			MethodName: "fetchGameRecord",
			Handler:    _Lobby_FetchGameRecord_Handler,
		},
		{
			MethodName: "readGameRecord",
			Handler:    _Lobby_ReadGameRecord_Handler,
		},
		{
			MethodName: "fetchGameRecordList",
			Handler:    _Lobby_FetchGameRecordList_Handler,
		},
		{
			MethodName: "fetchCollectedGameRecordList",
			Handler:    _Lobby_FetchCollectedGameRecordList_Handler,
		},
		{
			MethodName: "fetchGameRecordsDetail",
			Handler:    _Lobby_FetchGameRecordsDetail_Handler,
		},
		{
			MethodName: "addCollectedGameRecord",
			Handler:    _Lobby_AddCollectedGameRecord_Handler,
		},
		{
			MethodName: "removeCollectedGameRecord",
			Handler:    _Lobby_RemoveCollectedGameRecord_Handler,
		},
		{
			MethodName: "changeCollectedGameRecordRemarks",
			Handler:    _Lobby_ChangeCollectedGameRecordRemarks_Handler,
		},
		{
			MethodName: "fetchLevelLeaderboard",
			Handler:    _Lobby_FetchLevelLeaderboard_Handler,
		},
		{
			MethodName: "fetchChallengeLeaderboard",
			Handler:    _Lobby_FetchChallengeLeaderboard_Handler,
		},
		{
			MethodName: "fetchMutiChallengeLevel",
			Handler:    _Lobby_FetchMutiChallengeLevel_Handler,
		},
		{
			MethodName: "fetchMultiAccountBrief",
			Handler:    _Lobby_FetchMultiAccountBrief_Handler,
		},
		{
			MethodName: "fetchFriendList",
			Handler:    _Lobby_FetchFriendList_Handler,
		},
		{
			MethodName: "fetchFriendApplyList",
			Handler:    _Lobby_FetchFriendApplyList_Handler,
		},
		{
			MethodName: "applyFriend",
			Handler:    _Lobby_ApplyFriend_Handler,
		},
		{
			MethodName: "handleFriendApply",
			Handler:    _Lobby_HandleFriendApply_Handler,
		},
		{
			MethodName: "removeFriend",
			Handler:    _Lobby_RemoveFriend_Handler,
		},
		{
			MethodName: "searchAccountById",
			Handler:    _Lobby_SearchAccountById_Handler,
		},
		{
			MethodName: "searchAccountByPattern",
			Handler:    _Lobby_SearchAccountByPattern_Handler,
		},
		{
			MethodName: "fetchAccountState",
			Handler:    _Lobby_FetchAccountState_Handler,
		},
		{
			MethodName: "fetchBagInfo",
			Handler:    _Lobby_FetchBagInfo_Handler,
		},
		{
			MethodName: "useBagItem",
			Handler:    _Lobby_UseBagItem_Handler,
		},
		{
			MethodName: "openManualItem",
			Handler:    _Lobby_OpenManualItem_Handler,
		},
		{
			MethodName: "openRandomRewardItem",
			Handler:    _Lobby_OpenRandomRewardItem_Handler,
		},
		{
			MethodName: "openAllRewardItem",
			Handler:    _Lobby_OpenAllRewardItem_Handler,
		},
		{
			MethodName: "composeShard",
			Handler:    _Lobby_ComposeShard_Handler,
		},
		{
			MethodName: "fetchAnnouncement",
			Handler:    _Lobby_FetchAnnouncement_Handler,
		},
		{
			MethodName: "readAnnouncement",
			Handler:    _Lobby_ReadAnnouncement_Handler,
		},
		{
			MethodName: "fetchMailInfo",
			Handler:    _Lobby_FetchMailInfo_Handler,
		},
		{
			MethodName: "readMail",
			Handler:    _Lobby_ReadMail_Handler,
		},
		{
			MethodName: "deleteMail",
			Handler:    _Lobby_DeleteMail_Handler,
		},
		{
			MethodName: "takeAttachmentFromMail",
			Handler:    _Lobby_TakeAttachmentFromMail_Handler,
		},
		{
			MethodName: "receiveAchievementReward",
			Handler:    _Lobby_ReceiveAchievementReward_Handler,
		},
		{
			MethodName: "receiveAchievementGroupReward",
			Handler:    _Lobby_ReceiveAchievementGroupReward_Handler,
		},
		{
			MethodName: "fetchAchievementRate",
			Handler:    _Lobby_FetchAchievementRate_Handler,
		},
		{
			MethodName: "fetchAchievement",
			Handler:    _Lobby_FetchAchievement_Handler,
		},
		{
			MethodName: "buyShiLian",
			Handler:    _Lobby_BuyShiLian_Handler,
		},
		{
			MethodName: "matchShiLian",
			Handler:    _Lobby_MatchShiLian_Handler,
		},
		{
			MethodName: "goNextShiLian",
			Handler:    _Lobby_GoNextShiLian_Handler,
		},
		{
			MethodName: "updateClientValue",
			Handler:    _Lobby_UpdateClientValue_Handler,
		},
		{
			MethodName: "fetchClientValue",
			Handler:    _Lobby_FetchClientValue_Handler,
		},
		{
			MethodName: "clientMessage",
			Handler:    _Lobby_ClientMessage_Handler,
		},
		{
			MethodName: "fetchCurrentMatchInfo",
			Handler:    _Lobby_FetchCurrentMatchInfo_Handler,
		},
		{
			MethodName: "userComplain",
			Handler:    _Lobby_UserComplain_Handler,
		},
		{
			MethodName: "fetchReviveCoinInfo",
			Handler:    _Lobby_FetchReviveCoinInfo_Handler,
		},
		{
			MethodName: "gainReviveCoin",
			Handler:    _Lobby_GainReviveCoin_Handler,
		},
		{
			MethodName: "fetchDailyTask",
			Handler:    _Lobby_FetchDailyTask_Handler,
		},
		{
			MethodName: "refreshDailyTask",
			Handler:    _Lobby_RefreshDailyTask_Handler,
		},
		{
			MethodName: "useGiftCode",
			Handler:    _Lobby_UseGiftCode_Handler,
		},
		{
			MethodName: "useSpecialGiftCode",
			Handler:    _Lobby_UseSpecialGiftCode_Handler,
		},
		{
			MethodName: "fetchTitleList",
			Handler:    _Lobby_FetchTitleList_Handler,
		},
		{
			MethodName: "useTitle",
			Handler:    _Lobby_UseTitle_Handler,
		},
		{
			MethodName: "sendClientMessage",
			Handler:    _Lobby_SendClientMessage_Handler,
		},
		{
			MethodName: "fetchGameLiveInfo",
			Handler:    _Lobby_FetchGameLiveInfo_Handler,
		},
		{
			MethodName: "fetchGameLiveLeftSegment",
			Handler:    _Lobby_FetchGameLiveLeftSegment_Handler,
		},
		{
			MethodName: "fetchGameLiveList",
			Handler:    _Lobby_FetchGameLiveList_Handler,
		},
		{
			MethodName: "fetchCommentSetting",
			Handler:    _Lobby_FetchCommentSetting_Handler,
		},
		{
			MethodName: "updateCommentSetting",
			Handler:    _Lobby_UpdateCommentSetting_Handler,
		},
		{
			MethodName: "fetchCommentList",
			Handler:    _Lobby_FetchCommentList_Handler,
		},
		{
			MethodName: "fetchCommentContent",
			Handler:    _Lobby_FetchCommentContent_Handler,
		},
		{
			MethodName: "leaveComment",
			Handler:    _Lobby_LeaveComment_Handler,
		},
		{
			MethodName: "deleteComment",
			Handler:    _Lobby_DeleteComment_Handler,
		},
		{
			MethodName: "updateReadComment",
			Handler:    _Lobby_UpdateReadComment_Handler,
		},
		{
			MethodName: "fetchRollingNotice",
			Handler:    _Lobby_FetchRollingNotice_Handler,
		},
		{
			MethodName: "fetchServerTime",
			Handler:    _Lobby_FetchServerTime_Handler,
		},
		{
			MethodName: "fetchPlatformProducts",
			Handler:    _Lobby_FetchPlatformProducts_Handler,
		},
		{
			MethodName: "cancelGooglePlayOrder",
			Handler:    _Lobby_CancelGooglePlayOrder_Handler,
		},
		{
			MethodName: "openChest",
			Handler:    _Lobby_OpenChest_Handler,
		},
		{
			MethodName: "buyFromChestShop",
			Handler:    _Lobby_BuyFromChestShop_Handler,
		},
		{
			MethodName: "fetchDailySignInInfo",
			Handler:    _Lobby_FetchDailySignInInfo_Handler,
		},
		{
			MethodName: "doDailySignIn",
			Handler:    _Lobby_DoDailySignIn_Handler,
		},
		{
			MethodName: "doActivitySignIn",
			Handler:    _Lobby_DoActivitySignIn_Handler,
		},
		{
			MethodName: "fetchCharacterInfo",
			Handler:    _Lobby_FetchCharacterInfo_Handler,
		},
		{
			MethodName: "updateCharacterSort",
			Handler:    _Lobby_UpdateCharacterSort_Handler,
		},
		{
			MethodName: "changeMainCharacter",
			Handler:    _Lobby_ChangeMainCharacter_Handler,
		},
		{
			MethodName: "changeCharacterSkin",
			Handler:    _Lobby_ChangeCharacterSkin_Handler,
		},
		{
			MethodName: "changeCharacterView",
			Handler:    _Lobby_ChangeCharacterView_Handler,
		},
		{
			MethodName: "setHiddenCharacter",
			Handler:    _Lobby_SetHiddenCharacter_Handler,
		},
		{
			MethodName: "sendGiftToCharacter",
			Handler:    _Lobby_SendGiftToCharacter_Handler,
		},
		{
			MethodName: "sellItem",
			Handler:    _Lobby_SellItem_Handler,
		},
		{
			MethodName: "fetchCommonView",
			Handler:    _Lobby_FetchCommonView_Handler,
		},
		{
			MethodName: "changeCommonView",
			Handler:    _Lobby_ChangeCommonView_Handler,
		},
		{
			MethodName: "saveCommonViews",
			Handler:    _Lobby_SaveCommonViews_Handler,
		},
		{
			MethodName: "fetchCommonViews",
			Handler:    _Lobby_FetchCommonViews_Handler,
		},
		{
			MethodName: "fetchAllCommonViews",
			Handler:    _Lobby_FetchAllCommonViews_Handler,
		},
		{
			MethodName: "useCommonView",
			Handler:    _Lobby_UseCommonView_Handler,
		},
		{
			MethodName: "upgradeCharacter",
			Handler:    _Lobby_UpgradeCharacter_Handler,
		},
		{
			MethodName: "addFinishedEnding",
			Handler:    _Lobby_AddFinishedEnding_Handler,
		},
		{
			MethodName: "receiveEndingReward",
			Handler:    _Lobby_ReceiveEndingReward_Handler,
		},
		{
			MethodName: "gameMasterCommand",
			Handler:    _Lobby_GameMasterCommand_Handler,
		},
		{
			MethodName: "fetchShopInfo",
			Handler:    _Lobby_FetchShopInfo_Handler,
		},
		{
			MethodName: "buyFromShop",
			Handler:    _Lobby_BuyFromShop_Handler,
		},
		{
			MethodName: "buyFromZHP",
			Handler:    _Lobby_BuyFromZHP_Handler,
		},
		{
			MethodName: "refreshZHPShop",
			Handler:    _Lobby_RefreshZHPShop_Handler,
		},
		{
			MethodName: "fetchMonthTicketInfo",
			Handler:    _Lobby_FetchMonthTicketInfo_Handler,
		},
		{
			MethodName: "payMonthTicket",
			Handler:    _Lobby_PayMonthTicket_Handler,
		},
		{
			MethodName: "exchangeCurrency",
			Handler:    _Lobby_ExchangeCurrency_Handler,
		},
		{
			MethodName: "exchangeChestStone",
			Handler:    _Lobby_ExchangeChestStone_Handler,
		},
		{
			MethodName: "exchangeDiamond",
			Handler:    _Lobby_ExchangeDiamond_Handler,
		},
		{
			MethodName: "fetchServerSettings",
			Handler:    _Lobby_FetchServerSettings_Handler,
		},
		{
			MethodName: "fetchAccountSettings",
			Handler:    _Lobby_FetchAccountSettings_Handler,
		},
		{
			MethodName: "updateAccountSettings",
			Handler:    _Lobby_UpdateAccountSettings_Handler,
		},
		{
			MethodName: "fetchModNicknameTime",
			Handler:    _Lobby_FetchModNicknameTime_Handler,
		},
		{
			MethodName: "createWechatNativeOrder",
			Handler:    _Lobby_CreateWechatNativeOrder_Handler,
		},
		{
			MethodName: "createWechatAppOrder",
			Handler:    _Lobby_CreateWechatAppOrder_Handler,
		},
		{
			MethodName: "createAlipayOrder",
			Handler:    _Lobby_CreateAlipayOrder_Handler,
		},
		{
			MethodName: "createAlipayScanOrder",
			Handler:    _Lobby_CreateAlipayScanOrder_Handler,
		},
		{
			MethodName: "createAlipayAppOrder",
			Handler:    _Lobby_CreateAlipayAppOrder_Handler,
		},
		{
			MethodName: "createJPCreditCardOrder",
			Handler:    _Lobby_CreateJPCreditCardOrder_Handler,
		},
		{
			MethodName: "createJPPaypalOrder",
			Handler:    _Lobby_CreateJPPaypalOrder_Handler,
		},
		{
			MethodName: "createJPAuOrder",
			Handler:    _Lobby_CreateJPAuOrder_Handler,
		},
		{
			MethodName: "createJPDocomoOrder",
			Handler:    _Lobby_CreateJPDocomoOrder_Handler,
		},
		{
			MethodName: "createJPWebMoneyOrder",
			Handler:    _Lobby_CreateJPWebMoneyOrder_Handler,
		},
		{
			MethodName: "createJPSoftbankOrder",
			Handler:    _Lobby_CreateJPSoftbankOrder_Handler,
		},
		{
			MethodName: "createENPaypalOrder",
			Handler:    _Lobby_CreateENPaypalOrder_Handler,
		},
		{
			MethodName: "createENMasterCardOrder",
			Handler:    _Lobby_CreateENMasterCardOrder_Handler,
		},
		{
			MethodName: "createENVisaOrder",
			Handler:    _Lobby_CreateENVisaOrder_Handler,
		},
		{
			MethodName: "createENJCBOrder",
			Handler:    _Lobby_CreateENJCBOrder_Handler,
		},
		{
			MethodName: "createENAlipayOrder",
			Handler:    _Lobby_CreateENAlipayOrder_Handler,
		},
		{
			MethodName: "createDMMOrder",
			Handler:    _Lobby_CreateDMMOrder_Handler,
		},
		{
			MethodName: "createIAPOrder",
			Handler:    _Lobby_CreateIAPOrder_Handler,
		},
		{
			MethodName: "createSteamOrder",
			Handler:    _Lobby_CreateSteamOrder_Handler,
		},
		{
			MethodName: "verifySteamOrder",
			Handler:    _Lobby_VerifySteamOrder_Handler,
		},
		{
			MethodName: "createMyCardAndroidOrder",
			Handler:    _Lobby_CreateMyCardAndroidOrder_Handler,
		},
		{
			MethodName: "createMyCardWebOrder",
			Handler:    _Lobby_CreateMyCardWebOrder_Handler,
		},
		{
			MethodName: "createPaypalOrder",
			Handler:    _Lobby_CreatePaypalOrder_Handler,
		},
		{
			MethodName: "createXsollaOrder",
			Handler:    _Lobby_CreateXsollaOrder_Handler,
		},
		{
			MethodName: "verifyMyCardOrder",
			Handler:    _Lobby_VerifyMyCardOrder_Handler,
		},
		{
			MethodName: "verificationIAPOrder",
			Handler:    _Lobby_VerificationIAPOrder_Handler,
		},
		{
			MethodName: "createYostarSDKOrder",
			Handler:    _Lobby_CreateYostarSDKOrder_Handler,
		},
		{
			MethodName: "createBillingOrder",
			Handler:    _Lobby_CreateBillingOrder_Handler,
		},
		{
			MethodName: "solveGooglePlayOrder",
			Handler:    _Lobby_SolveGooglePlayOrder_Handler,
		},
		{
			MethodName: "solveGooglePayOrderV3",
			Handler:    _Lobby_SolveGooglePayOrderV3_Handler,
		},
		{
			MethodName: "fetchMisc",
			Handler:    _Lobby_FetchMisc_Handler,
		},
		{
			MethodName: "modifySignature",
			Handler:    _Lobby_ModifySignature_Handler,
		},
		{
			MethodName: "fetchIDCardInfo",
			Handler:    _Lobby_FetchIDCardInfo_Handler,
		},
		{
			MethodName: "updateIDCardInfo",
			Handler:    _Lobby_UpdateIDCardInfo_Handler,
		},
		{
			MethodName: "fetchVipReward",
			Handler:    _Lobby_FetchVipReward_Handler,
		},
		{
			MethodName: "gainVipReward",
			Handler:    _Lobby_GainVipReward_Handler,
		},
		{
			MethodName: "fetchRefundOrder",
			Handler:    _Lobby_FetchRefundOrder_Handler,
		},
		{
			MethodName: "fetchCustomizedContestList",
			Handler:    _Lobby_FetchCustomizedContestList_Handler,
		},
		{
			MethodName: "fetchCustomizedContestExtendInfo",
			Handler:    _Lobby_FetchCustomizedContestExtendInfo_Handler,
		},
		{
			MethodName: "fetchCustomizedContestAuthInfo",
			Handler:    _Lobby_FetchCustomizedContestAuthInfo_Handler,
		},
		{
			MethodName: "enterCustomizedContest",
			Handler:    _Lobby_EnterCustomizedContest_Handler,
		},
		{
			MethodName: "leaveCustomizedContest",
			Handler:    _Lobby_LeaveCustomizedContest_Handler,
		},
		{
			MethodName: "fetchCustomizedContestOnlineInfo",
			Handler:    _Lobby_FetchCustomizedContestOnlineInfo_Handler,
		},
		{
			MethodName: "fetchCustomizedContestByContestId",
			Handler:    _Lobby_FetchCustomizedContestByContestId_Handler,
		},
		{
			MethodName: "startCustomizedContest",
			Handler:    _Lobby_StartCustomizedContest_Handler,
		},
		{
			MethodName: "stopCustomizedContest",
			Handler:    _Lobby_StopCustomizedContest_Handler,
		},
		{
			MethodName: "joinCustomizedContestChatRoom",
			Handler:    _Lobby_JoinCustomizedContestChatRoom_Handler,
		},
		{
			MethodName: "leaveCustomizedContestChatRoom",
			Handler:    _Lobby_LeaveCustomizedContestChatRoom_Handler,
		},
		{
			MethodName: "sayChatMessage",
			Handler:    _Lobby_SayChatMessage_Handler,
		},
		{
			MethodName: "fetchCustomizedContestGameRecords",
			Handler:    _Lobby_FetchCustomizedContestGameRecords_Handler,
		},
		{
			MethodName: "fetchCustomizedContestGameLiveList",
			Handler:    _Lobby_FetchCustomizedContestGameLiveList_Handler,
		},
		{
			MethodName: "followCustomizedContest",
			Handler:    _Lobby_FollowCustomizedContest_Handler,
		},
		{
			MethodName: "unfollowCustomizedContest",
			Handler:    _Lobby_UnfollowCustomizedContest_Handler,
		},
		{
			MethodName: "fetchActivityList",
			Handler:    _Lobby_FetchActivityList_Handler,
		},
		{
			MethodName: "fetchAccountActivityData",
			Handler:    _Lobby_FetchAccountActivityData_Handler,
		},
		{
			MethodName: "exchangeActivityItem",
			Handler:    _Lobby_ExchangeActivityItem_Handler,
		},
		{
			MethodName: "completeActivityTask",
			Handler:    _Lobby_CompleteActivityTask_Handler,
		},
		{
			MethodName: "completeActivityFlipTask",
			Handler:    _Lobby_CompleteActivityFlipTask_Handler,
		},
		{
			MethodName: "completePeriodActivityTask",
			Handler:    _Lobby_CompletePeriodActivityTask_Handler,
		},
		{
			MethodName: "completeRandomActivityTask",
			Handler:    _Lobby_CompleteRandomActivityTask_Handler,
		},
		{
			MethodName: "receiveActivityFlipTask",
			Handler:    _Lobby_ReceiveActivityFlipTask_Handler,
		},
		{
			MethodName: "completeSegmentTaskReward",
			Handler:    _Lobby_CompleteSegmentTaskReward_Handler,
		},
		{
			MethodName: "fetchActivityFlipInfo",
			Handler:    _Lobby_FetchActivityFlipInfo_Handler,
		},
		{
			MethodName: "gainAccumulatedPointActivityReward",
			Handler:    _Lobby_GainAccumulatedPointActivityReward_Handler,
		},
		{
			MethodName: "gainMultiPointActivityReward",
			Handler:    _Lobby_GainMultiPointActivityReward_Handler,
		},
		{
			MethodName: "fetchRankPointLeaderboard",
			Handler:    _Lobby_FetchRankPointLeaderboard_Handler,
		},
		{
			MethodName: "gainRankPointReward",
			Handler:    _Lobby_GainRankPointReward_Handler,
		},
		{
			MethodName: "richmanActivityNextMove",
			Handler:    _Lobby_RichmanActivityNextMove_Handler,
		},
		{
			MethodName: "richmanAcitivitySpecialMove",
			Handler:    _Lobby_RichmanAcitivitySpecialMove_Handler,
		},
		{
			MethodName: "richmanActivityChestInfo",
			Handler:    _Lobby_RichmanActivityChestInfo_Handler,
		},
		{
			MethodName: "createGameObserveAuth",
			Handler:    _Lobby_CreateGameObserveAuth_Handler,
		},
		{
			MethodName: "refreshGameObserveAuth",
			Handler:    _Lobby_RefreshGameObserveAuth_Handler,
		},
		{
			MethodName: "fetchActivityBuff",
			Handler:    _Lobby_FetchActivityBuff_Handler,
		},
		{
			MethodName: "upgradeActivityBuff",
			Handler:    _Lobby_UpgradeActivityBuff_Handler,
		},
		{
			MethodName: "upgradeChallenge",
			Handler:    _Lobby_UpgradeChallenge_Handler,
		},
		{
			MethodName: "refreshChallenge",
			Handler:    _Lobby_RefreshChallenge_Handler,
		},
		{
			MethodName: "fetchChallengeInfo",
			Handler:    _Lobby_FetchChallengeInfo_Handler,
		},
		{
			MethodName: "forceCompleteChallengeTask",
			Handler:    _Lobby_ForceCompleteChallengeTask_Handler,
		},
		{
			MethodName: "fetchChallengeSeason",
			Handler:    _Lobby_FetchChallengeSeason_Handler,
		},
		{
			MethodName: "receiveChallengeRankReward",
			Handler:    _Lobby_ReceiveChallengeRankReward_Handler,
		},
		{
			MethodName: "fetchABMatchInfo",
			Handler:    _Lobby_FetchABMatchInfo_Handler,
		},
		{
			MethodName: "buyInABMatch",
			Handler:    _Lobby_BuyInABMatch_Handler,
		},
		{
			MethodName: "receiveABMatchReward",
			Handler:    _Lobby_ReceiveABMatchReward_Handler,
		},
		{
			MethodName: "quitABMatch",
			Handler:    _Lobby_QuitABMatch_Handler,
		},
		{
			MethodName: "startUnifiedMatch",
			Handler:    _Lobby_StartUnifiedMatch_Handler,
		},
		{
			MethodName: "cancelUnifiedMatch",
			Handler:    _Lobby_CancelUnifiedMatch_Handler,
		},
		{
			MethodName: "fetchGamePointRank",
			Handler:    _Lobby_FetchGamePointRank_Handler,
		},
		{
			MethodName: "fetchSelfGamePointRank",
			Handler:    _Lobby_FetchSelfGamePointRank_Handler,
		},
		{
			MethodName: "readSNS",
			Handler:    _Lobby_ReadSNS_Handler,
		},
		{
			MethodName: "replySNS",
			Handler:    _Lobby_ReplySNS_Handler,
		},
		{
			MethodName: "likeSNS",
			Handler:    _Lobby_LikeSNS_Handler,
		},
		{
			MethodName: "digMine",
			Handler:    _Lobby_DigMine_Handler,
		},
		{
			MethodName: "fetchLastPrivacy",
			Handler:    _Lobby_FetchLastPrivacy_Handler,
		},
		{
			MethodName: "checkPrivacy",
			Handler:    _Lobby_CheckPrivacy_Handler,
		},
		{
			MethodName: "responseCaptcha",
			Handler:    _Lobby_ResponseCaptcha_Handler,
		},
		{
			MethodName: "fetchRPGBattleHistory",
			Handler:    _Lobby_FetchRPGBattleHistory_Handler,
		},
		{
			MethodName: "receiveRPGRewards",
			Handler:    _Lobby_ReceiveRPGRewards_Handler,
		},
		{
			MethodName: "buyArenaTicket",
			Handler:    _Lobby_BuyArenaTicket_Handler,
		},
		{
			MethodName: "enterArena",
			Handler:    _Lobby_EnterArena_Handler,
		},
		{
			MethodName: "receiveArenaReward",
			Handler:    _Lobby_ReceiveArenaReward_Handler,
		},
		{
			MethodName: "fetchOBToken",
			Handler:    _Lobby_FetchOBToken_Handler,
		},
		{
			MethodName: "receiveCharacterRewards",
			Handler:    _Lobby_ReceiveCharacterRewards_Handler,
		},
		{
			MethodName: "feedActivityFeed",
			Handler:    _Lobby_FeedActivityFeed_Handler,
		},
		{
			MethodName: "sendActivityGiftToFriend",
			Handler:    _Lobby_SendActivityGiftToFriend_Handler,
		},
		{
			MethodName: "receiveActivityGift",
			Handler:    _Lobby_ReceiveActivityGift_Handler,
		},
		{
			MethodName: "fetchFriendFeedActivityData",
			Handler:    _Lobby_FetchFriendFeedActivityData_Handler,
		},
		{
			MethodName: "openPreChestItem",
			Handler:    _Lobby_OpenPreChestItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liqi.proto",
}

// FastTestClient is the client API for FastTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FastTestClient interface {
	AuthGame(ctx context.Context, in *ReqAuthGame, opts ...grpc.CallOption) (*ResAuthGame, error)
	EnterGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResEnterGame, error)
	SyncGame(ctx context.Context, in *ReqSyncGame, opts ...grpc.CallOption) (*ResSyncGame, error)
	FinishSyncGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	TerminateGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	InputOperation(ctx context.Context, in *ReqSelfOperation, opts ...grpc.CallOption) (*ResCommon, error)
	InputChiPengGang(ctx context.Context, in *ReqChiPengGang, opts ...grpc.CallOption) (*ResCommon, error)
	ConfirmNewRound(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	BroadcastInGame(ctx context.Context, in *ReqBroadcastInGame, opts ...grpc.CallOption) (*ResCommon, error)
	InputGameGMCommand(ctx context.Context, in *ReqGMCommandInGaming, opts ...grpc.CallOption) (*ResCommon, error)
	FetchGamePlayerState(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResGamePlayerState, error)
	CheckNetworkDelay(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	ClearLeaving(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
	VoteGameEnd(ctx context.Context, in *ReqVoteGameEnd, opts ...grpc.CallOption) (*ResGameEndVote, error)
	AuthObserve(ctx context.Context, in *ReqAuthObserve, opts ...grpc.CallOption) (*ResCommon, error)
	StartObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResStartObserve, error)
	StopObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error)
}

type fastTestClient struct {
	cc grpc.ClientConnInterface
}

func NewFastTestClient(cc grpc.ClientConnInterface) FastTestClient {
	return &fastTestClient{cc}
}

func (c *fastTestClient) AuthGame(ctx context.Context, in *ReqAuthGame, opts ...grpc.CallOption) (*ResAuthGame, error) {
	out := new(ResAuthGame)
	err := c.cc.Invoke(ctx, "/lq.FastTest/authGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) EnterGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResEnterGame, error) {
	out := new(ResEnterGame)
	err := c.cc.Invoke(ctx, "/lq.FastTest/enterGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) SyncGame(ctx context.Context, in *ReqSyncGame, opts ...grpc.CallOption) (*ResSyncGame, error) {
	out := new(ResSyncGame)
	err := c.cc.Invoke(ctx, "/lq.FastTest/syncGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) FinishSyncGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/finishSyncGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) TerminateGame(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/terminateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) InputOperation(ctx context.Context, in *ReqSelfOperation, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/inputOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) InputChiPengGang(ctx context.Context, in *ReqChiPengGang, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/inputChiPengGang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) ConfirmNewRound(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/confirmNewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) BroadcastInGame(ctx context.Context, in *ReqBroadcastInGame, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/broadcastInGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) InputGameGMCommand(ctx context.Context, in *ReqGMCommandInGaming, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/inputGameGMCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) FetchGamePlayerState(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResGamePlayerState, error) {
	out := new(ResGamePlayerState)
	err := c.cc.Invoke(ctx, "/lq.FastTest/fetchGamePlayerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) CheckNetworkDelay(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/checkNetworkDelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) ClearLeaving(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/clearLeaving", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) VoteGameEnd(ctx context.Context, in *ReqVoteGameEnd, opts ...grpc.CallOption) (*ResGameEndVote, error) {
	out := new(ResGameEndVote)
	err := c.cc.Invoke(ctx, "/lq.FastTest/voteGameEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) AuthObserve(ctx context.Context, in *ReqAuthObserve, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/authObserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) StartObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResStartObserve, error) {
	out := new(ResStartObserve)
	err := c.cc.Invoke(ctx, "/lq.FastTest/startObserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastTestClient) StopObserve(ctx context.Context, in *ReqCommon, opts ...grpc.CallOption) (*ResCommon, error) {
	out := new(ResCommon)
	err := c.cc.Invoke(ctx, "/lq.FastTest/stopObserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FastTestServer is the server API for FastTest service.
// All implementations must embed UnimplementedFastTestServer
// for forward compatibility
type FastTestServer interface {
	AuthGame(context.Context, *ReqAuthGame) (*ResAuthGame, error)
	EnterGame(context.Context, *ReqCommon) (*ResEnterGame, error)
	SyncGame(context.Context, *ReqSyncGame) (*ResSyncGame, error)
	FinishSyncGame(context.Context, *ReqCommon) (*ResCommon, error)
	TerminateGame(context.Context, *ReqCommon) (*ResCommon, error)
	InputOperation(context.Context, *ReqSelfOperation) (*ResCommon, error)
	InputChiPengGang(context.Context, *ReqChiPengGang) (*ResCommon, error)
	ConfirmNewRound(context.Context, *ReqCommon) (*ResCommon, error)
	BroadcastInGame(context.Context, *ReqBroadcastInGame) (*ResCommon, error)
	InputGameGMCommand(context.Context, *ReqGMCommandInGaming) (*ResCommon, error)
	FetchGamePlayerState(context.Context, *ReqCommon) (*ResGamePlayerState, error)
	CheckNetworkDelay(context.Context, *ReqCommon) (*ResCommon, error)
	ClearLeaving(context.Context, *ReqCommon) (*ResCommon, error)
	VoteGameEnd(context.Context, *ReqVoteGameEnd) (*ResGameEndVote, error)
	AuthObserve(context.Context, *ReqAuthObserve) (*ResCommon, error)
	StartObserve(context.Context, *ReqCommon) (*ResStartObserve, error)
	StopObserve(context.Context, *ReqCommon) (*ResCommon, error)
	mustEmbedUnimplementedFastTestServer()
}

// UnimplementedFastTestServer must be embedded to have forward compatible implementations.
type UnimplementedFastTestServer struct {
}

func (UnimplementedFastTestServer) AuthGame(context.Context, *ReqAuthGame) (*ResAuthGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthGame not implemented")
}
func (UnimplementedFastTestServer) EnterGame(context.Context, *ReqCommon) (*ResEnterGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterGame not implemented")
}
func (UnimplementedFastTestServer) SyncGame(context.Context, *ReqSyncGame) (*ResSyncGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncGame not implemented")
}
func (UnimplementedFastTestServer) FinishSyncGame(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishSyncGame not implemented")
}
func (UnimplementedFastTestServer) TerminateGame(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateGame not implemented")
}
func (UnimplementedFastTestServer) InputOperation(context.Context, *ReqSelfOperation) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputOperation not implemented")
}
func (UnimplementedFastTestServer) InputChiPengGang(context.Context, *ReqChiPengGang) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputChiPengGang not implemented")
}
func (UnimplementedFastTestServer) ConfirmNewRound(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmNewRound not implemented")
}
func (UnimplementedFastTestServer) BroadcastInGame(context.Context, *ReqBroadcastInGame) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastInGame not implemented")
}
func (UnimplementedFastTestServer) InputGameGMCommand(context.Context, *ReqGMCommandInGaming) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputGameGMCommand not implemented")
}
func (UnimplementedFastTestServer) FetchGamePlayerState(context.Context, *ReqCommon) (*ResGamePlayerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGamePlayerState not implemented")
}
func (UnimplementedFastTestServer) CheckNetworkDelay(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNetworkDelay not implemented")
}
func (UnimplementedFastTestServer) ClearLeaving(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearLeaving not implemented")
}
func (UnimplementedFastTestServer) VoteGameEnd(context.Context, *ReqVoteGameEnd) (*ResGameEndVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGameEnd not implemented")
}
func (UnimplementedFastTestServer) AuthObserve(context.Context, *ReqAuthObserve) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthObserve not implemented")
}
func (UnimplementedFastTestServer) StartObserve(context.Context, *ReqCommon) (*ResStartObserve, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartObserve not implemented")
}
func (UnimplementedFastTestServer) StopObserve(context.Context, *ReqCommon) (*ResCommon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopObserve not implemented")
}
func (UnimplementedFastTestServer) mustEmbedUnimplementedFastTestServer() {}

// UnsafeFastTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FastTestServer will
// result in compilation errors.
type UnsafeFastTestServer interface {
	mustEmbedUnimplementedFastTestServer()
}

func RegisterFastTestServer(s grpc.ServiceRegistrar, srv FastTestServer) {
	s.RegisterService(&FastTest_ServiceDesc, srv)
}

func _FastTest_AuthGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).AuthGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/authGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).AuthGame(ctx, req.(*ReqAuthGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_EnterGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).EnterGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/enterGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).EnterGame(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_SyncGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSyncGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).SyncGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/syncGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).SyncGame(ctx, req.(*ReqSyncGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_FinishSyncGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).FinishSyncGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/finishSyncGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).FinishSyncGame(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_TerminateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).TerminateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/terminateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).TerminateGame(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_InputOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSelfOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).InputOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/inputOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).InputOperation(ctx, req.(*ReqSelfOperation))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_InputChiPengGang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChiPengGang)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).InputChiPengGang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/inputChiPengGang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).InputChiPengGang(ctx, req.(*ReqChiPengGang))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_ConfirmNewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).ConfirmNewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/confirmNewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).ConfirmNewRound(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_BroadcastInGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBroadcastInGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).BroadcastInGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/broadcastInGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).BroadcastInGame(ctx, req.(*ReqBroadcastInGame))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_InputGameGMCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGMCommandInGaming)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).InputGameGMCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/inputGameGMCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).InputGameGMCommand(ctx, req.(*ReqGMCommandInGaming))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_FetchGamePlayerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).FetchGamePlayerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/fetchGamePlayerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).FetchGamePlayerState(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_CheckNetworkDelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).CheckNetworkDelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/checkNetworkDelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).CheckNetworkDelay(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_ClearLeaving_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).ClearLeaving(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/clearLeaving",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).ClearLeaving(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_VoteGameEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqVoteGameEnd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).VoteGameEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/voteGameEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).VoteGameEnd(ctx, req.(*ReqVoteGameEnd))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_AuthObserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAuthObserve)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).AuthObserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/authObserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).AuthObserve(ctx, req.(*ReqAuthObserve))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_StartObserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).StartObserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/startObserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).StartObserve(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastTest_StopObserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCommon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastTestServer).StopObserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lq.FastTest/stopObserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastTestServer).StopObserve(ctx, req.(*ReqCommon))
	}
	return interceptor(ctx, in, info, handler)
}

// FastTest_ServiceDesc is the grpc.ServiceDesc for FastTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FastTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lq.FastTest",
	HandlerType: (*FastTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "authGame",
			Handler:    _FastTest_AuthGame_Handler,
		},
		{
			MethodName: "enterGame",
			Handler:    _FastTest_EnterGame_Handler,
		},
		{
			MethodName: "syncGame",
			Handler:    _FastTest_SyncGame_Handler,
		},
		{
			MethodName: "finishSyncGame",
			Handler:    _FastTest_FinishSyncGame_Handler,
		},
		{
			MethodName: "terminateGame",
			Handler:    _FastTest_TerminateGame_Handler,
		},
		{
			MethodName: "inputOperation",
			Handler:    _FastTest_InputOperation_Handler,
		},
		{
			MethodName: "inputChiPengGang",
			Handler:    _FastTest_InputChiPengGang_Handler,
		},
		{
			MethodName: "confirmNewRound",
			Handler:    _FastTest_ConfirmNewRound_Handler,
		},
		{
			MethodName: "broadcastInGame",
			Handler:    _FastTest_BroadcastInGame_Handler,
		},
		{
			MethodName: "inputGameGMCommand",
			Handler:    _FastTest_InputGameGMCommand_Handler,
		},
		{
			MethodName: "fetchGamePlayerState",
			Handler:    _FastTest_FetchGamePlayerState_Handler,
		},
		{
			MethodName: "checkNetworkDelay",
			Handler:    _FastTest_CheckNetworkDelay_Handler,
		},
		{
			MethodName: "clearLeaving",
			Handler:    _FastTest_ClearLeaving_Handler,
		},
		{
			MethodName: "voteGameEnd",
			Handler:    _FastTest_VoteGameEnd_Handler,
		},
		{
			MethodName: "authObserve",
			Handler:    _FastTest_AuthObserve_Handler,
		},
		{
			MethodName: "startObserve",
			Handler:    _FastTest_StartObserve_Handler,
		},
		{
			MethodName: "stopObserve",
			Handler:    _FastTest_StopObserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liqi.proto",
}
